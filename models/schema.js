const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –¥–ª—è –º—É—Ç–æ–≤
const muteSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    endTime: { type: Date, required: true },
    reason: { type: String, default: '–ù–µ —É–∫–∞–∑–∞–Ω–∞' },
    addedAt: { type: Date, default: Date.now },
    addedBy: { type: String }
});

// –°—Ö–µ–º–∞ –¥–ª—è –±–∞–Ω–æ–≤
const banSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    reason: { type: String, default: '–ù–µ —É–∫–∞–∑–∞–Ω–∞' },
    moderatorId: { type: String },
    createdAt: { type: Date, default: Date.now }
});

// –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const warningSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    warnings: [{
        ruleId: { type: String, required: true },
        reason: { type: String, required: true },
        moderatorId: { type: String, required: true },
        timestamp: { type: Date, default: Date.now }
    }]
});

// –°—Ö–µ–º–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
const warnSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    reason: { type: String, required: true },
    moderatorId: { type: String, required: true },
    createdAt: { type: Date, default: Date.now }
});

// –°—Ö–µ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π)
const userSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    xp: { type: Number, default: 0 },
    level: { type: Number, default: 0 },
    messages: { type: Number, default: 0 },
    voiceTime: { type: Number, default: 0 },  // –≤ –º–∏–Ω—É—Ç–∞—Ö
    lastMessageDate: { type: Date, default: Date.now }
});

// –°—Ö–µ–º–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
const tempRoleSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    roleId: { type: String, required: true },
    roleName: { type: String, required: true },
    reason: { type: String, default: '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å' },
    addedAt: { type: Date, default: Date.now },
    expiresAt: { type: Date, required: true },
    addedBy: { type: String }
});

// –°—Ö–µ–º–∞ –¥–ª—è –∫–ª–∞–Ω–æ–≤
const clanSchema = new mongoose.Schema({
    name: { type: String, required: true },
    owner: { type: String, required: true },
    description: { type: String, default: '' },
    emoji: { type: String, default: 'üè∞' },
    members: [{ type: String }],
    level: { type: Number, default: 1 },
    exp: { type: Number, default: 0 },
    power: { type: Number, default: 100 },
    channelId: { type: String },
    roleId: { type: String }
});

// –°—Ö–µ–º–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
const modStatsSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    actions: {
        mutes: { type: Number, default: 0 },
        bans: { type: Number, default: 0 },
        kicks: { type: Number, default: 0 },
        warns: { type: Number, default: 0 }
    }
});

// –°—Ö–µ–º–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const riskPointsSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    guildId: { type: String, required: true },
    totalPoints: { type: Number, default: 0 },
    history: [{
        points: { type: Number, required: true },
        reason: { type: String, required: true },
        timestamp: { type: Date, default: Date.now }
    }]
});

// –°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
const ticketSchema = new mongoose.Schema({
    channelId: { type: String, required: true },
    userId: { type: String, required: true }, 
    guildId: { type: String, required: true },
    createdAt: { type: Date, default: Date.now },
    closed: { type: Boolean, default: false }
});

// –°—Ö–µ–º–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
const actionLogSchema = new mongoose.Schema({
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏
    actionType: { type: String, required: true }, // –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (message, command, moderation, etc.)
    actionSubtype: { type: String }, // –ü–æ–¥—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (ban, mute, etc.)
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    userId: { type: String }, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
    targetId: { type: String }, // ID —Ü–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç
    guildId: { type: String, required: true },
    channelId: { type: String },
    messageId: { type: String },
    
    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content: { type: String }, // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    timestamp: { type: Date, default: Date.now },
    successful: { type: Boolean, default: true },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    metadata: { type: Object },
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
    relatedLogs: [{ type: mongoose.Schema.Types.ObjectId, ref: 'ActionLog' }]
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
actionLogSchema.index({ guildId: 1, actionType: 1, timestamp: -1 });
actionLogSchema.index({ userId: 1, timestamp: -1 });
actionLogSchema.index({ channelId: 1, timestamp: -1 });

// –ú–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º
const Mute = mongoose.model('Mute', muteSchema);
const Ban = mongoose.model('Ban', banSchema);
const Warning = mongoose.model('Warning', warningSchema);
const Warn = mongoose.model('Warn', warnSchema);
const User = mongoose.model('User', userSchema);
const TempRole = mongoose.model('TempRole', tempRoleSchema);
const Clan = mongoose.model('Clan', clanSchema);
const ModStats = mongoose.model('ModStats', modStatsSchema);
const RiskPoints = mongoose.model('RiskPoints', riskPointsSchema);
const Ticket = mongoose.model('Ticket', ticketSchema);
const ActionLog = mongoose.model('ActionLog', actionLogSchema);

module.exports = {
    Mute,
    Ban,
    Warning,
    Warn,
    User,
    TempRole,
    Clan,
    ModStats,
    RiskPoints,
    Ticket,
    ActionLog
}; 