const { EmbedBuilder } = require('discord.js');
const mongoose = require('mongoose');
const cron = require('node-cron');

// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª—å TempRole
const { TempRole } = require('../models/schema');

// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ —Ä–æ–ª–µ–π
const roleTimers = new Map();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 */
async function initTempRoleSystem(client) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ –ë–î
        const tempRoles = await TempRole.find({});
        
        for (const roleData of tempRoles) {
            const { guildId, userId, roleId, expiresAt } = roleData;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —É–∂–µ —Å—Ä–æ–∫
            if (new Date(expiresAt) <= new Date()) {
                await removeExpiredRole(client, roleData);
                continue;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–æ–ª–∏
            setRoleTimer(client, roleData);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ—á–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–µ–π
        cron.schedule('0 * * * *', async () => {
            await checkExpiredRoles(client);
        });
        
        console.log('–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π:', error);
    }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 * @param {Object} roleData - –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
 */
function setRoleTimer(client, roleData) {
    const { _id, guildId, userId, roleId, expiresAt } = roleData;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const now = new Date();
    const expiry = new Date(expiresAt);
    const timeLeft = expiry - now;
    
    // –ï—Å–ª–∏ —Å—Ä–æ–∫ —É–∂–µ –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º —Ä–æ–ª—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (timeLeft <= 0) {
        removeExpiredRole(client, roleData);
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ setTimeout)
    const timer = setTimeout(async () => {
        await removeExpiredRole(client, roleData);
    }, Math.min(timeLeft, 86400000)); // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –≤ –∫–∞—Ä—Ç—É
    roleTimers.set(_id.toString(), timer);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 */
async function checkExpiredRoles(client) {
    try {
        const now = new Date();
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ —Ä–æ–ª–∏
        const expiredRoles = await TempRole.find({ expiresAt: { $lte: now } });
        
        for (const roleData of expiredRoles) {
            await removeExpiredRole(client, roleData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–æ–ª–µ–π:', error);
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 * @param {Object} roleData - –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
 */
async function removeExpiredRole(client, roleData) {
    const { _id, guildId, userId, roleId, expiresAt } = roleData;
    
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const timerId = _id.toString();
        if (roleTimers.has(timerId)) {
            clearTimeout(roleTimers.get(timerId));
            roleTimers.delete(timerId);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const guild = client.guilds.cache.get(guildId);
        if (!guild) {
            console.warn(`–°–µ—Ä–≤–µ—Ä ${guildId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏`);
            await TempRole.findByIdAndDelete(_id);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const member = await guild.members.fetch(userId).catch(() => null);
        if (!member) {
            console.warn(`–£—á–∞—Å—Ç–Ω–∏–∫ ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏`);
            await TempRole.findByIdAndDelete(_id);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
        const role = guild.roles.cache.get(roleId);
        if (!role) {
            console.warn(`–†–æ–ª—å ${roleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
            await TempRole.findByIdAndDelete(_id);
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —É —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await member.roles.remove(role, '–°—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ –∏—Å—Ç–µ–∫');
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        await TempRole.findByIdAndDelete(_id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
        await logRoleRemoval(guild, member, role);
        
        console.log(`–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å ${role.name} —É–¥–∞–ª–µ–Ω–∞ —É ${member.user.tag} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${guild.name}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏:', error);
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
 * @param {Guild} guild - –°–µ—Ä–≤–µ—Ä Discord
 * @param {GuildMember} member - –£—á–∞—Å—Ç–Ω–∏–∫ Discord
 * @param {Role} role - –†–æ–ª—å Discord
 */
async function logRoleRemoval(guild, member, role) {
    try {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        const logChannel = guild.systemChannel;
        if (!logChannel) return;
        
        const embed = new EmbedBuilder()
            .setTitle('üïí –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞')
            .setDescription(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${member} –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å ${role} –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞`)
            .setColor('#ff9900')
            .setTimestamp();
        
        await logChannel.send({ embeds: [embed] });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏:', error);
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É
 * @param {GuildMember} member - –£—á–∞—Å—Ç–Ω–∏–∫ Discord
 * @param {Role} role - –†–æ–ª—å Discord
 * @param {number} duration - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function addTempRole(member, role, duration, reason = '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å') {
    try {
        if (!member || !role) {
            return { success: false, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω—ã' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–¥–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å
        if (!member.guild.members.me.permissions.has('ManageRoles') || 
            role.position >= member.guild.members.me.roles.highest.position) {
            return { 
                success: false, 
                message: '–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —ç—Ç–æ–π —Ä–æ–ª–∏' 
            };
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É
        await member.roles.add(role, reason);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const expiresAt = new Date(Date.now() + duration);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        const tempRole = new TempRole({
            guildId: member.guild.id,
            userId: member.id,
            roleId: role.id,
            roleName: role.name,
            reason,
            addedAt: new Date(),
            expiresAt,
            addedBy: reason.includes('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏') ? 'SYSTEM' : null
        });
        
        await tempRole.save();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–æ–ª–∏
        setRoleTimer(member.client, tempRole);
        
        return { 
            success: true, 
            message: `–†–æ–ª—å ${role.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member.user.tag} –¥–æ ${expiresAt.toLocaleString()}` 
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏:', error);
        return { success: false, message: `–û—à–∏–±–∫–∞: ${error.message}` };
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é
 * @param {GuildMember} member - –£—á–∞—Å—Ç–Ω–∏–∫ Discord
 * @param {Role} role - –†–æ–ª—å Discord
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function removeTempRole(member, role, reason = '–£–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é') {
    try {
        if (!member || !role) {
            return { success: false, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω—ã' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å
        if (!member.guild.members.me.permissions.has('ManageRoles') || 
            role.position >= member.guild.members.me.roles.highest.position) {
            return { 
                success: false, 
                message: '–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ä–æ–ª–∏' 
            };
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        const tempRole = await TempRole.findOne({ 
            guildId: member.guild.id,
            userId: member.id,
            roleId: role.id
        });
        
        if (!tempRole) {
            return { success: false, message: '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' };
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        const timerId = tempRole._id.toString();
        if (roleTimers.has(timerId)) {
            clearTimeout(roleTimers.get(timerId));
            roleTimers.delete(timerId);
        }
        
        // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —É —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await member.roles.remove(role, reason);
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        await TempRole.findByIdAndDelete(tempRole._id);
        
        return { 
            success: true, 
            message: `–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å ${role.name} —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag}` 
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏:', error);
        return { success: false, message: `–û—à–∏–±–∫–∞: ${error.message}` };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param {GuildMember} member - –£—á–∞—Å—Ç–Ω–∏–∫ Discord
 * @returns {Array} - –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
 */
async function getMemberTempRoles(member) {
    try {
        const tempRoles = await TempRole.find({
            guildId: member.guild.id,
            userId: member.id
        });
        
        return tempRoles.map(role => ({
            roleId: role.roleId,
            roleName: role.roleName,
            expiresAt: role.expiresAt,
            reason: role.reason,
            addedAt: role.addedAt,
            timeLeft: new Date(role.expiresAt) - new Date()
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        return [];
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
 * @param {GuildMember} member - –£—á–∞—Å—Ç–Ω–∏–∫ Discord
 * @param {Role} role - –†–æ–ª—å Discord
 * @param {number} newDuration - –ù–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function updateTempRoleDuration(member, role, newDuration) {
    try {
        if (!member || !role) {
            return { success: false, message: '–£—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω—ã' };
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        const tempRole = await TempRole.findOne({ 
            guildId: member.guild.id,
            userId: member.id,
            roleId: role.id
        });
        
        if (!tempRole) {
            return { success: false, message: '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' };
        }
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä
        const timerId = tempRole._id.toString();
        if (roleTimers.has(timerId)) {
            clearTimeout(roleTimers.get(timerId));
            roleTimers.delete(timerId);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        const newExpiresAt = new Date(Date.now() + newDuration);
        tempRole.expiresAt = newExpiresAt;
        await tempRole.save();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        setRoleTimer(member.client, tempRole);
        
        return { 
            success: true, 
            message: `–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–æ–ª–∏ ${role.name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${newExpiresAt.toLocaleString()}` 
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏:', error);
        return { success: false, message: `–û—à–∏–±–∫–∞: ${error.message}` };
    }
}

module.exports = {
    initTempRoleSystem,
    addTempRole,
    removeTempRole,
    getMemberTempRoles,
    updateTempRoleDuration
}; 