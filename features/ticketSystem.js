const { 
    EmbedBuilder, 
    ActionRowBuilder, 
    ButtonBuilder, 
    ButtonStyle,
    ChannelType,
    PermissionFlagsBits
} = require('discord.js');
const config = require('../config');

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
 * @param {Object} channel - –ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–∞–Ω–µ–ª—å
 */
async function createTicketPanel(channel) {
    if (!channel) throw new Error('–ö–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω');

    const embed = new EmbedBuilder()
        .setTitle('üìù –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤')
        .setDescription('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç. –ù–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.')
        .setColor(0x3498DB)
        .setFooter({ text: '–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤' })
        .setTimestamp();

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('create_ticket')
                .setLabel('–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üé´')
        );

    return await channel.send({ embeds: [embed], components: [row] });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 * @param {String} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
 */
async function createTicket(interaction, categoryId) {
    await interaction.deferReply({ ephemeral: true });
    
    if (!interaction.guild) {
        return await interaction.editReply({ 
            content: '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
            ephemeral: true 
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
    const existingTicket = interaction.guild.channels.cache.find(
        c => c.name === `ticket-${interaction.user.username.toLowerCase().replace(/\s+/g, '-')}` && 
        c.parentId === categoryId
    );
    
    if (existingTicket) {
        return await interaction.editReply({ 
            content: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç: ${existingTicket}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.`,
            ephemeral: true 
        });
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = interaction.guild.channels.cache.get(categoryId);
        if (!category) {
            throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: ${categoryId})`);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–∞
        const ticketChannel = await interaction.guild.channels.create({
            name: `ticket-${interaction.user.username.toLowerCase().replace(/\s+/g, '-')}`,
            type: ChannelType.GuildText,
            parent: categoryId,
            permissionOverwrites: [
                {
                    id: interaction.guild.id, // @everyone
                    deny: [PermissionFlagsBits.ViewChannel]
                },
                {
                    id: interaction.user.id, // –∞–≤—Ç–æ—Ä —Ç–∏–∫–µ—Ç–∞
                    allow: [
                        PermissionFlagsBits.ViewChannel,
                        PermissionFlagsBits.SendMessages,
                        PermissionFlagsBits.ReadMessageHistory
                    ]
                },
                {
                    id: config.adminRoleId, // —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    allow: [
                        PermissionFlagsBits.ViewChannel,
                        PermissionFlagsBits.SendMessages,
                        PermissionFlagsBits.ReadMessageHistory,
                        PermissionFlagsBits.ManageChannels
                    ]
                },
                {
                    id: config.modRoleId, // —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                    allow: [
                        PermissionFlagsBits.ViewChannel,
                        PermissionFlagsBits.SendMessages,
                        PermissionFlagsBits.ReadMessageHistory
                    ]
                }
            ]
        });
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ
        const embed = new EmbedBuilder()
            .setTitle('üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç')
            .setDescription(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${interaction.user}! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`)
            .setColor(0x3498DB)
            .setFooter({ text: '–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤' })
            .setTimestamp();
        
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üîí')
            );
        
        await ticketChannel.send({ 
            content: `${interaction.user} ${interaction.guild.roles.cache.get(config.modRoleId)}`,
            embeds: [embed], 
            components: [row] 
        });
        
        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
        await interaction.editReply({ 
            content: `‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${ticketChannel}`,
            ephemeral: true 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
        
        await interaction.editReply({ 
            content: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: ${error.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`,
            ephemeral: true 
        });
    }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 */
async function closeTicket(interaction) {
    await interaction.deferReply();
    
    const channel = interaction.channel;
    
    if (!channel.name.startsWith('ticket-')) {
        return interaction.editReply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö —Ç–∏–∫–µ—Ç–æ–≤.');
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
        const embed = new EmbedBuilder()
            .setTitle('üîí –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è')
            .setDescription('–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.')
            .setColor(0xE74C3C)
            .setFooter({ text: '–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤' })
            .setTimestamp();
        
        await interaction.editReply({ embeds: [embed] });
        
        // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –∏ —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        setTimeout(() => {
            channel.delete().catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ —Ç–∏–∫–µ—Ç–∞:', error);
            });
        }, 5000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
        
        await interaction.editReply({ 
            content: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: ${error.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`
        });
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–∏–∫–µ—Ç–∞–º–∏
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 * @param {String} ticketCategoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
 */
async function handleTicketInteraction(interaction, ticketCategoryId) {
    if (!interaction.isButton()) return;
    
    const { customId } = interaction;
    
    if (customId === 'create_ticket') {
        await createTicket(interaction, ticketCategoryId);
    } else if (customId === 'close_ticket') {
        await closeTicket(interaction);
    }
}

module.exports = {
    createTicketPanel,
    handleTicketInteraction
}; 