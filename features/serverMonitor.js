const axios = require('axios');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const { EmbedBuilder } = require('discord.js');

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
const STATUS_HISTORY_FILE = path.join(__dirname, '../data/server_status_history.json');
// ID –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const MONITORED_BOT_ID = '1263608448931729511';
// ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
let NOTIFICATION_CHANNEL_ID = null;
// –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
let previousStatus = {
    groq: true,
    bot: true
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
    const dirname = path.dirname(dirPath);
    if (!fs.existsSync(dirname)) {
        fs.mkdirSync(dirname, { recursive: true });
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
function loadStatusHistory() {
    ensureDirectoryExists(STATUS_HISTORY_FILE);
    if (!fs.existsSync(STATUS_HISTORY_FILE)) {
        return {
            groq: [],
            bot: []
        };
    }
    
    try {
        const data = fs.readFileSync(STATUS_HISTORY_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
        return {
            groq: [],
            bot: []
        };
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
function saveStatusHistory(history) {
    ensureDirectoryExists(STATUS_HISTORY_FILE);
    fs.writeFileSync(STATUS_HISTORY_FILE, JSON.stringify(history, null, 2), 'utf8');
}

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ç—É—Å–µ
function addStatusRecord(service, isUp, responseTime = null) {
    const history = loadStatusHistory();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 50 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    if (history[service].length >= 50) {
        history[service].shift();
    }
    
    history[service].push({
        timestamp: Date.now(),
        isUp,
        responseTime
    });
    
    saveStatusHistory(history);
    return history;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Groq API
async function checkGroqStatus() {
    try {
        const startTime = Date.now();
        const response = await axios.get('https://api.groq.com/', { // –±–∞–ª—è—Ç—å –æ–Ω–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–∏—Ç—å
            timeout: 5000,
            validateStatus: () => true
        });
        const responseTime = Date.now() - startTime;
        
        const isUp = response.status === 200;
        addStatusRecord('groq', isUp, responseTime);
        
        return {
            isUp,
            responseTime,
            statusCode: response.status,
            message: isUp ? 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ' : `–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Groq API:', error.message);
        addStatusRecord('groq', false);
        
        return {
            isUp: false,
            responseTime: null,
            statusCode: error.response?.status || 0,
            message: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`
        };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Discord –±–æ—Ç–∞
async function checkBotStatus(botId) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Discord API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        const startTime = Date.now();
        const response = await axios.get(`https://discord.com/api/v10/users/${botId}`, {
            timeout: 5000,
            headers: {
                'Authorization': `Bot ${process.env.TOKEN || require('../config').token}`
            },
            validateStatus: () => true
        });
        const responseTime = Date.now() - startTime;
        
        const isUp = response.status === 200;
        addStatusRecord('bot', isUp, responseTime);
        
        return {
            isUp,
            responseTime,
            statusCode: response.status,
            botName: response.data?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            message: isUp ? '–ë–æ—Ç –æ–Ω–ª–∞–π–Ω' : `–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error.message);
        addStatusRecord('bot', false);
        
        return {
            isUp: false,
            responseTime: null,
            statusCode: error.response?.status || 0,
            botName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            message: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`
        };
    }
}

// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
function calculateUptime(history, service) {
    if (!history[service] || history[service].length === 0) {
        return 0;
    }
    
    const upCount = history[service].filter(record => record.isUp).length;
    return (upCount / history[service].length) * 100;
}

// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
function calculateAverageResponseTime(history, service) {
    const records = history[service].filter(record => record.responseTime !== null);
    
    if (records.length === 0) {
        return 0;
    }
    
    const sum = records.reduce((total, record) => total + record.responseTime, 0);
    return sum / records.length;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function initMonitoring(client, notificationChannelId) {
    NOTIFICATION_CHANNEL_ID = notificationChannelId;
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    cron.schedule('*/5 * * * *', async () => {
        await performHealthCheck(client);
    });
    
    console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.');
}

// –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
async function performHealthCheck(client) {
    try {
        console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        const groqStatus = await checkGroqStatus();
        const botStatus = await checkBotStatus(MONITORED_BOT_ID);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        if (previousStatus.groq !== groqStatus.isUp) {
            // –°—Ç–∞—Ç—É—Å Groq API –∏–∑–º–µ–Ω–∏–ª—Å—è
            sendStatusChangeNotification(client, 'groq', groqStatus);
            previousStatus.groq = groqStatus.isUp;
        }
        
        if (previousStatus.bot !== botStatus.isUp) {
            // –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è
            sendStatusChangeNotification(client, 'bot', botStatus);
            previousStatus.bot = botStatus.isUp;
        }
        
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: Groq API - ${groqStatus.isUp ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}, –ë–æ—Ç - ${botStatus.isUp ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
async function sendStatusChangeNotification(client, service, status) {
    if (!NOTIFICATION_CHANNEL_ID) return;
    
    try {
        const channel = await client.channels.fetch(NOTIFICATION_CHANNEL_ID);
        if (!channel) return;
        
        let serviceName = service === 'groq' ? 'Groq API' : 'Discord –ë–æ—Ç';
        let statusText = status.isUp ? '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        let statusEmoji = status.isUp ? 'üü¢' : 'üî¥';
        let color = status.isUp ? '#00FF00' : '#FF0000';
        
        const embed = new EmbedBuilder()
            .setTitle(`${statusEmoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞`)
            .setDescription(`–°–µ—Ä–≤–∏—Å **${serviceName}** —Å–µ–π—á–∞—Å ${statusText}!`)
            .addFields({
                name: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
                value: `–°—Ç–∞—Ç—É—Å: ${status.isUp ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}\n–ö–æ–¥: ${status.statusCode}\n${status.responseTime ? `–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${status.responseTime}–º—Å` : ''}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${status.message}`
            })
            .setColor(color)
            .setTimestamp();
        
        await channel.send({ embeds: [embed] });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
async function checkServersStatus() {
    const groqStatus = await checkGroqStatus();
    const botStatus = await checkBotStatus(MONITORED_BOT_ID);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const history = loadStatusHistory();
    const groqUptime = calculateUptime(history, 'groq');
    const botUptime = calculateUptime(history, 'bot');
    const groqAvgResponseTime = calculateAverageResponseTime(history, 'groq');
    const botAvgResponseTime = calculateAverageResponseTime(history, 'bot');
    
    return {
        groqStatus,
        botStatus,
        groqUptime,
        botUptime,
        groqAvgResponseTime,
        botAvgResponseTime
    };
}

module.exports = {
    initMonitoring,
    checkServersStatus,
    loadStatusHistory
}; 