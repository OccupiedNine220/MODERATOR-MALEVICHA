const { EmbedBuilder, AttachmentBuilder } = require('discord.js');
const { createCanvas } = require('canvas');
const moment = require('moment');

// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const { User, Mute, Warn, Ban } = require('../models/schema');

// ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
const REPORT_CHANNEL_ID = '1285152506061525042';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 */
async function generateDailyReport(client) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        const reportChannel = await client.channels.fetch(REPORT_CHANNEL_ID).catch(console.error);
        if (!reportChannel) {
            console.error(`–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ${REPORT_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        const mutesCount = await Mute.countDocuments({ addedAt: { $gte: yesterday } });
        const warnsCount = await Warn.countDocuments({ createdAt: { $gte: yesterday } });
        const bansCount = await Ban.countDocuments({ createdAt: { $gte: yesterday } });
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
        const totalActions = mutesCount + warnsCount + bansCount;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        const moderatorStats = await getModeratorsStats(yesterday);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ —á–∞—Å–∞–º
        const hourlyStats = await getHourlyStats(yesterday);
        
        // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        const chartAttachment = await createHourlyChart(hourlyStats);
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ—Ç—á–µ—Ç–æ–º
        const embed = new EmbedBuilder()
            .setTitle('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
            .setDescription(`–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: **${moment(yesterday).format('DD.MM.YYYY HH:mm')}** - **${moment().format('DD.MM.YYYY HH:mm')}**`)
            .addFields(
                { name: 'üîÑ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π', value: totalActions.toString(), inline: true },
                { name: 'üîá –ú—É—Ç—ã', value: mutesCount.toString(), inline: true },
                { name: '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', value: warnsCount.toString(), inline: true },
                { name: 'üî® –ë–∞–Ω—ã', value: bansCount.toString(), inline: true }
            )
            .setColor('#3498db')
            .setTimestamp()
            .setFooter({ text: '–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞—Ö
        if (moderatorStats.length > 0) {
            let moderatorsField = '';
            moderatorStats.slice(0, 5).forEach((mod, index) => {
                moderatorsField += `${index + 1}. <@${mod.moderatorId}>: **${mod.actions}** –¥–µ–π—Å—Ç–≤–∏–π\n`;
            });
            
            embed.addFields({ name: 'üëÆ –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', value: moderatorsField });
        } else {
            embed.addFields({ name: 'üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', value: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥' });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        await reportChannel.send({ 
            embeds: [embed],
            files: [chartAttachment]
        });
        
        console.log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 */
async function generateWeeklyReport(client) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        const reportChannel = await client.channels.fetch(REPORT_CHANNEL_ID).catch(console.error);
        if (!reportChannel) {
            console.error(`–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ${REPORT_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        const mutesCount = await Mute.countDocuments({ addedAt: { $gte: weekAgo } });
        const warnsCount = await Warn.countDocuments({ createdAt: { $gte: weekAgo } });
        const bansCount = await Ban.countDocuments({ createdAt: { $gte: weekAgo } });
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
        const totalActions = mutesCount + warnsCount + bansCount;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        const moderatorStats = await getModeratorsStats(weekAgo);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        const dailyStats = await getDailyStats(weekAgo);
        
        // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        const chartAttachment = await createDailyChart(dailyStats);
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ—Ç—á–µ—Ç–æ–º
        const embed = new EmbedBuilder()
            .setTitle('üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
            .setDescription(`–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: **${moment(weekAgo).format('DD.MM.YYYY')}** - **${moment().format('DD.MM.YYYY')}**`)
            .addFields(
                { name: 'üîÑ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π', value: totalActions.toString(), inline: true },
                { name: 'üîá –ú—É—Ç—ã', value: mutesCount.toString(), inline: true },
                { name: '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', value: warnsCount.toString(), inline: true },
                { name: 'üî® –ë–∞–Ω—ã', value: bansCount.toString(), inline: true }
            )
            .setColor('#9b59b6')
            .setTimestamp()
            .setFooter({ text: '–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞—Ö
        if (moderatorStats.length > 0) {
            let moderatorsField = '';
            moderatorStats.slice(0, 5).forEach((mod, index) => {
                moderatorsField += `${index + 1}. <@${mod.moderatorId}>: **${mod.actions}** –¥–µ–π—Å—Ç–≤–∏–π\n`;
            });
            
            embed.addFields({ name: 'üëÆ –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–µ–ª–∏', value: moderatorsField });
        } else {
            embed.addFields({ name: 'üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', value: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω—è—Ö
        const mostActiveDay = [...dailyStats].sort((a, b) => b.total - a.total)[0];
        if (mostActiveDay) {
            embed.addFields({ 
                name: 'üìÖ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å', 
                value: `**${getDayName(mostActiveDay.day)}**: ${mostActiveDay.total} –¥–µ–π—Å—Ç–≤–∏–π` 
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        await reportChannel.send({ 
            embeds: [embed],
            files: [chartAttachment] 
        });
        
        console.log('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {Client} client - –ö–ª–∏–µ–Ω—Ç Discord.js
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} guildId - ID —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} requestedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –æ—Ç—á–µ—Ç
 */
async function generateUserReport(client, userId, guildId, requestedBy) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        const reportChannel = await client.channels.fetch(REPORT_CHANNEL_ID).catch(console.error);
        if (!reportChannel) {
            console.error(`–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ${REPORT_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const guild = client.guilds.cache.get(guildId);
        if (!guild) {
            console.error(`–°–µ—Ä–≤–µ—Ä ${guildId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä)
        const member = await guild.members.fetch(userId).catch(() => null);
        const user = member ? member.user : await client.users.fetch(userId).catch(() => null);
        
        if (!user) {
            console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        const warnings = await Warn.find({ userId, guildId }).sort({ createdAt: -1 }).limit(10);
        const mutes = await Mute.find({ userId, guildId }).sort({ addedAt: -1 }).limit(10);
        const bans = await Ban.find({ userId, guildId }).sort({ createdAt: -1 }).limit(5);
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ—Ç—á–µ—Ç–æ–º
        const embed = new EmbedBuilder()
            .setTitle(`üë§ –û—Ç—á–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${user.tag}`)
            .setDescription(`–û—Ç—á–µ—Ç –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${userId}>`)
            .setThumbnail(user.displayAvatarURL({ dynamic: true }))
            .setColor('#e74c3c')
            .setTimestamp()
            .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${requestedBy}` });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
        if (warnings.length > 0) {
            let warningsField = '';
            warnings.forEach((warn, index) => {
                const date = moment(warn.createdAt).format('DD.MM.YYYY');
                warningsField += `${index + 1}. **${date}**: ${warn.reason || '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}\n`;
            });
            
            embed.addFields({ name: `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (${warnings.length})`, value: warningsField });
        } else {
            embed.addFields({ name: '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', value: '–ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–∞—Ö
        if (mutes.length > 0) {
            let mutesField = '';
            mutes.forEach((mute, index) => {
                const date = moment(mute.addedAt).format('DD.MM.YYYY');
                const duration = moment.duration(new Date(mute.expiresAt) - new Date(mute.addedAt)).humanize();
                mutesField += `${index + 1}. **${date}** (${duration}): ${mute.reason || '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}\n`;
            });
            
            embed.addFields({ name: `üîá –ú—É—Ç—ã (${mutes.length})`, value: mutesField });
        } else {
            embed.addFields({ name: 'üîá –ú—É—Ç—ã', value: '–ù–µ—Ç –º—É—Ç–æ–≤' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∞—Ö
        if (bans.length > 0) {
            let bansField = '';
            bans.forEach((ban, index) => {
                const date = moment(ban.createdAt).format('DD.MM.YYYY');
                bansField += `${index + 1}. **${date}**: ${ban.reason || '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}\n`;
            });
            
            embed.addFields({ name: `üî® –ë–∞–Ω—ã (${bans.length})`, value: bansField });
        } else {
            embed.addFields({ name: 'üî® –ë–∞–Ω—ã', value: '–ù–µ—Ç –±–∞–Ω–æ–≤' });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await reportChannel.send({ embeds: [embed] });
        
        console.log(`–û—Ç—á–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.tag} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
 * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
 */
async function getModeratorsStats(startDate) {
    try {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const moderators = new Map();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º—É—Ç–∞—Ö
        const mutes = await Mute.find({ addedAt: { $gte: startDate } });
        mutes.forEach(mute => {
            if (!mute.addedBy || mute.addedBy === 'SYSTEM') return;
            
            const modId = mute.addedBy;
            if (!moderators.has(modId)) {
                moderators.set(modId, { 
                    moderatorId: modId, 
                    actions: 0, 
                    mutes: 0, 
                    warns: 0, 
                    bans: 0 
                });
            }
            
            const modStats = moderators.get(modId);
            modStats.actions++;
            modStats.mutes++;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
        const warns = await Warn.find({ createdAt: { $gte: startDate } });
        warns.forEach(warn => {
            if (!warn.moderatorId) return;
            
            const modId = warn.moderatorId;
            if (!moderators.has(modId)) {
                moderators.set(modId, { 
                    moderatorId: modId, 
                    actions: 0, 
                    mutes: 0, 
                    warns: 0, 
                    bans: 0 
                });
            }
            
            const modStats = moderators.get(modId);
            modStats.actions++;
            modStats.warns++;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∞—Ö
        const bans = await Ban.find({ createdAt: { $gte: startDate } });
        bans.forEach(ban => {
            if (!ban.moderatorId) return;
            
            const modId = ban.moderatorId;
            if (!moderators.has(modId)) {
                moderators.set(modId, { 
                    moderatorId: modId, 
                    actions: 0, 
                    mutes: 0, 
                    warns: 0, 
                    bans: 0 
                });
            }
            
            const modStats = moderators.get(modId);
            modStats.actions++;
            modStats.bans++;
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–π—Å—Ç–≤–∏–π
        return Array.from(moderators.values())
            .sort((a, b) => b.actions - a.actions);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ —á–∞—Å–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
 * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —á–∞—Å–∞–º
 */
async function getHourlyStats(startDate) {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —á–∞—Å–æ–≤ (0-23)
        const hours = Array(24).fill().map((_, hour) => ({
            hour,
            mutes: 0,
            warns: 0,
            bans: 0,
            total: 0
        }));
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º—É—Ç–∞—Ö
        const mutes = await Mute.find({ addedAt: { $gte: startDate } });
        mutes.forEach(mute => {
            const hour = new Date(mute.addedAt).getHours();
            hours[hour].mutes++;
            hours[hour].total++;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
        const warns = await Warn.find({ createdAt: { $gte: startDate } });
        warns.forEach(warn => {
            const hour = new Date(warn.createdAt).getHours();
            hours[hour].warns++;
            hours[hour].total++;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∞—Ö
        const bans = await Ban.find({ createdAt: { $gte: startDate } });
        bans.forEach(ban => {
            const hour = new Date(ban.createdAt).getHours();
            hours[hour].bans++;
            hours[hour].total++;
        });
        
        return hours;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return Array(24).fill().map((_, hour) => ({
            hour,
            mutes: 0,
            warns: 0,
            bans: 0,
            total: 0
        }));
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
 * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
 */
async function getDailyStats(startDate) {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (0-6, –≥–¥–µ 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        const days = Array(7).fill().map((_, day) => ({
            day,
            mutes: 0,
            warns: 0,
            bans: 0,
            total: 0
        }));
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º—É—Ç–∞—Ö
        const mutes = await Mute.find({ addedAt: { $gte: startDate } });
        mutes.forEach(mute => {
            const day = new Date(mute.addedAt).getDay();
            days[day].mutes++;
            days[day].total++;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö
        const warns = await Warn.find({ createdAt: { $gte: startDate } });
        warns.forEach(warn => {
            const day = new Date(warn.createdAt).getDay();
            days[day].warns++;
            days[day].total++;
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∞—Ö
        const bans = await Ban.find({ createdAt: { $gte: startDate } });
        bans.forEach(ban => {
            const day = new Date(ban.createdAt).getDay();
            days[day].bans++;
            days[day].total++;
        });
        
        return days;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:', error);
        return Array(7).fill().map((_, day) => ({
            day,
            mutes: 0,
            warns: 0,
            bans: 0,
            total: 0
        }));
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å–∞–º
 * @param {Array} hourlyStats - –î–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º
 * @returns {AttachmentBuilder} - –í–ª–æ–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
 */
async function createHourlyChart(hourlyStats) {
    // –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const canvas = createCanvas(800, 400);
    const ctx = canvas.getContext('2d');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω
    ctx.fillStyle = '#2f3136';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
    ctx.font = '14px Arial';
    ctx.fillStyle = '#ffffff';
    ctx.strokeStyle = '#4f545c';
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const maxValue = Math.max(...hourlyStats.map(hour => hour.total));
    const scale = maxValue === 0 ? 1 : (canvas.height - 100) / maxValue;
    
    // –†–∏—Å—É–µ–º –æ—Å–∏
    ctx.beginPath();
    ctx.moveTo(50, 50);
    ctx.lineTo(50, canvas.height - 50);
    ctx.lineTo(canvas.width - 50, canvas.height - 50);
    ctx.stroke();
    
    // –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ —á–∞—Å–æ–≤
    const barWidth = (canvas.width - 100) / 24;
    hourlyStats.forEach((hour, index) => {
        ctx.fillText(index.toString(), 50 + index * barWidth + barWidth / 2 - 5, canvas.height - 30);
    });
    
    // –†–∏—Å—É–µ–º –±–∞–Ω—ã
    ctx.fillStyle = '#e74c3c';
    hourlyStats.forEach((hour, index) => {
        if (hour.bans > 0) {
            const height = hour.bans * scale;
            ctx.fillRect(
                50 + index * barWidth + 2,
                canvas.height - 50 - height,
                barWidth - 4,
                height
            );
        }
    });
    
    // –†–∏—Å—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    ctx.fillStyle = '#f1c40f';
    hourlyStats.forEach((hour, index) => {
        if (hour.warns > 0) {
            const height = hour.warns * scale;
            ctx.fillRect(
                50 + index * barWidth + 2,
                canvas.height - 50 - height - (hour.bans * scale),
                barWidth - 4,
                height
            );
        }
    });
    
    // –†–∏—Å—É–µ–º –º—É—Ç—ã
    ctx.fillStyle = '#3498db';
    hourlyStats.forEach((hour, index) => {
        if (hour.mutes > 0) {
            const height = hour.mutes * scale;
            ctx.fillRect(
                50 + index * barWidth + 2,
                canvas.height - 50 - height - (hour.bans * scale) - (hour.warns * scale),
                barWidth - 4,
                height
            );
        }
    });
    
    // –†–∏—Å—É–µ–º –ª–µ–≥–µ–Ω–¥—É
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ —á–∞—Å–∞–º (UTC+3)', canvas.width / 2 - 100, 30);
    
    // –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
    ctx.fillStyle = '#3498db';
    ctx.fillRect(canvas.width - 150, 70, 20, 20);
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ú—É—Ç—ã', canvas.width - 120, 85);
    
    ctx.fillStyle = '#f1c40f';
    ctx.fillRect(canvas.width - 150, 100, 20, 20);
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', canvas.width - 120, 115);
    
    ctx.fillStyle = '#e74c3c';
    ctx.fillRect(canvas.width - 150, 130, 20, 20);
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ë–∞–Ω—ã', canvas.width - 120, 145);
    
    // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const buffer = canvas.toBuffer('image/png');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
    return new AttachmentBuilder(buffer, { name: 'hourly-moderation.png' });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
 * @param {Array} dailyStats - –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
 * @returns {AttachmentBuilder} - –í–ª–æ–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
 */
async function createDailyChart(dailyStats) {
    // –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const canvas = createCanvas(800, 400);
    const ctx = canvas.getContext('2d');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω
    ctx.fillStyle = '#2f3136';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
    ctx.font = '14px Arial';
    ctx.fillStyle = '#ffffff';
    ctx.strokeStyle = '#4f545c';
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const maxValue = Math.max(...dailyStats.map(day => day.total));
    const scale = maxValue === 0 ? 1 : (canvas.height - 100) / maxValue;
    
    // –†–∏—Å—É–µ–º –æ—Å–∏
    ctx.beginPath();
    ctx.moveTo(50, 50);
    ctx.lineTo(50, canvas.height - 50);
    ctx.lineTo(canvas.width - 50, canvas.height - 50);
    ctx.stroke();
    
    // –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const barWidth = (canvas.width - 100) / 7;
    const dayNames = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'];
    dailyStats.forEach((day, index) => {
        ctx.fillText(dayNames[index], 50 + index * barWidth + barWidth / 2 - 10, canvas.height - 30);
    });
    
    // –†–∏—Å—É–µ–º –±–∞–Ω—ã
    ctx.fillStyle = '#e74c3c';
    dailyStats.forEach((day, index) => {
        if (day.bans > 0) {
            const height = day.bans * scale;
            ctx.fillRect(
                50 + index * barWidth + 5,
                canvas.height - 50 - height,
                barWidth - 10,
                height
            );
        }
    });
    
    // –†–∏—Å—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    ctx.fillStyle = '#f1c40f';
    dailyStats.forEach((day, index) => {
        if (day.warns > 0) {
            const height = day.warns * scale;
            ctx.fillRect(
                50 + index * barWidth + 5,
                canvas.height - 50 - height - (day.bans * scale),
                barWidth - 10,
                height
            );
        }
    });
    
    // –†–∏—Å—É–µ–º –º—É—Ç—ã
    ctx.fillStyle = '#3498db';
    dailyStats.forEach((day, index) => {
        if (day.mutes > 0) {
            const height = day.mutes * scale;
            ctx.fillRect(
                50 + index * barWidth + 5,
                canvas.height - 50 - height - (day.bans * scale) - (day.warns * scale),
                barWidth - 10,
                height
            );
        }
    });
    
    // –†–∏—Å—É–µ–º –ª–µ–≥–µ–Ω–¥—É
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', canvas.width / 2 - 100, 30);
    
    // –õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤
    ctx.fillStyle = '#3498db';
    ctx.fillRect(canvas.width - 150, 70, 20, 20);
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ú—É—Ç—ã', canvas.width - 120, 85);
    
    ctx.fillStyle = '#f1c40f';
    ctx.fillRect(canvas.width - 150, 100, 20, 20);
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', canvas.width - 120, 115);
    
    ctx.fillStyle = '#e74c3c';
    ctx.fillRect(canvas.width - 150, 130, 20, 20);
    ctx.fillStyle = '#ffffff';
    ctx.fillText('–ë–∞–Ω—ã', canvas.width - 120, 145);
    
    // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const buffer = canvas.toBuffer('image/png');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
    return new AttachmentBuilder(buffer, { name: 'daily-moderation.png' });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 * @param {number} day - –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0-6)
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 */
function getDayName(day) {
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    return days[day] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

module.exports = {
    generateDailyReport,
    generateWeeklyReport,
    generateUserReport
}; 