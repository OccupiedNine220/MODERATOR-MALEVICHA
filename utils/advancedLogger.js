const { EmbedBuilder } = require('discord.js');
const config = require('../config');
const { ActionLog } = require('../models/schema');

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
 * @returns {Promise<Object>} - –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
 */
async function logAdvancedAction(options) {
    try {
        const {
            actionType,          // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            actionSubtype = '',  // –ü–æ–¥—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            userId = null,       // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            targetId = null,     // ID —Ü–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
            guildId,             // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ID —Å–µ—Ä–≤–µ—Ä–∞
            channelId = null,    // ID –∫–∞–Ω–∞–ª–∞
            messageId = null,    // ID —Å–æ–æ–±—â–µ–Ω–∏—è
            content = '',        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
            metadata = {},       // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            successful = true,   // –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
            relatedLogs = []     // –°–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
        } = options;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!actionType || !guildId) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: actionType –∏–ª–∏ guildId');
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —ç–º–±–µ–¥–æ–≤ –æ—Ç –ò–ò)
        const logEntry = new ActionLog({
            actionType,
            actionSubtype,
            userId,
            targetId,
            guildId,
            channelId,
            messageId,
            content,
            metadata,
            successful,
            relatedLogs
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        await logEntry.save();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —ç–º–±–µ–¥ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
        await sendEnhancedLogToChannel(logEntry, options.guild);
        
        return logEntry;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', error);
        return null;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —ç–º–±–µ–¥ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
 * @param {Object} logEntry - –ó–∞–ø–∏—Å—å –ª–æ–≥–∞
 * @param {Object} guild - –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
async function sendEnhancedLogToChannel(logEntry, guild) {
    try {
        if (!guild) return;
        
        const logChannel = guild.channels.cache.get(config.logChannelId);
        if (!logChannel) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–±–µ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        const embedSettings = getEmbedSettings(logEntry.actionType, logEntry.actionSubtype, logEntry.successful);
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤—É —ç–º–±–µ–¥–∞
        const embed = new EmbedBuilder()
            .setTitle(embedSettings.title)
            .setColor(embedSettings.color)
            .setTimestamp(logEntry.timestamp);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if (embedSettings.thumbnail) {
            embed.setThumbnail(embedSettings.thumbnail);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (logEntry.userId) {
            try {
                const user = await guild.client.users.fetch(logEntry.userId);
                embed.setAuthor({ 
                    name: user.tag, 
                    iconURL: user.displayAvatarURL({ dynamic: true }) 
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                if (['moderation', 'level_up', 'user_join', 'user_leave'].includes(logEntry.actionType)) {
                    embed.setThumbnail(user.displayAvatarURL({ dynamic: true, size: 256 }));
                }
            } catch (e) {
                embed.addFields({ name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `ID: ${logEntry.userId}`, inline: true });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        if (logEntry.targetId) {
            try {
                const target = await guild.client.users.fetch(logEntry.targetId);
                embed.addFields({ 
                    name: embedSettings.targetLabel || '–¶–µ–ª—å', 
                    value: `${target.tag} (${target.id})`, 
                    inline: true 
                });
                
                // –î–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Ü–µ–ª–∏
                if (logEntry.actionType === 'moderation') {
                    embed.setThumbnail(target.displayAvatarURL({ dynamic: true, size: 256 }));
                }
            } catch (e) {
                embed.addFields({ name: embedSettings.targetLabel || '–¶–µ–ª—å', value: `ID: ${logEntry.targetId}`, inline: true });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        if (logEntry.channelId) {
            embed.addFields({ name: '–ö–∞–Ω–∞–ª', value: `<#${logEntry.channelId}>`, inline: true });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (logEntry.content) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
            let formattedContent = logEntry.content;
            
            // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞
            if (logEntry.actionType === 'message') {
                formattedContent = '```\n' + (logEntry.content.length > 1000 
                    ? logEntry.content.substring(0, 997) + '...' 
                    : logEntry.content) + '\n```';
            }
            
            embed.addFields({ 
                name: embedSettings.contentLabel || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ', 
                value: formattedContent.length > 1024 
                    ? formattedContent.substring(0, 1021) + '...' 
                    : formattedContent,
                inline: false 
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (logEntry.metadata && Object.keys(logEntry.metadata).length > 0) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
            const formattedMetadata = formatMetadata(logEntry.metadata, logEntry.actionType, logEntry.actionSubtype);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            for (const [key, value] of Object.entries(formattedMetadata)) {
                if (value && value.toString().trim()) {
                    embed.addFields({ name: key, value: value.toString(), inline: key !== '–î–µ—Ç–∞–ª–∏' });
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º footer —Å ID –∑–∞–ø–∏—Å–∏ –∏ –≤–µ—Ä—Å–∏–µ–π –±–æ—Ç–∞
        embed.setFooter({ 
            text: `${config.version} ‚Ä¢ ID: ${logEntry._id}`,
            iconURL: guild.client.user.displayAvatarURL({ dynamic: true })
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥
        await logChannel.send({ embeds: [embed] });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ –∫–∞–Ω–∞–ª:', error);
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–±–µ–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
 * @param {string} actionType - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @param {string} actionSubtype - –ü–æ–¥—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @param {boolean} successful - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
 * @returns {Object} - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–±–µ–¥–∞
 */
function getEmbedSettings(actionType, actionSubtype, successful) {
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = {
        title: 'üìù –õ–æ–≥',
        color: 0x0099FF,
        thumbnail: null,
        targetLabel: '–¶–µ–ª—å',
        contentLabel: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ'
    };
    
    // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ, –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
    if (!successful) {
        settings.color = 0xFF0000;
        settings.title = '‚ùå –û—à–∏–±–∫–∞';
        return settings;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    switch (actionType) {
        case 'message':
            settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
            
            switch (actionSubtype) {
                case 'create':
                    settings.title = 'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
                    settings.contentLabel = '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è';
                    break;
                case 'edit':
                    settings.title = '‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    settings.contentLabel = '–ò–∑–º–µ–Ω–µ–Ω–∏—è';
                    break;
                case 'delete':
                    settings.title = 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    settings.contentLabel = '–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç';
                    break;
                default:
                    settings.title = 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ';
            }
            break;
            
        case 'command':
            settings.title = `ü§ñ –ö–æ–º–∞–Ω–¥–∞ /${actionSubtype || ''}`;
            settings.color = 0x00CCFF; // –ì–æ–ª—É–±–æ–π
            settings.contentLabel = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã';
            break;
            
        case 'moderation':
            settings.color = 0xFF9900; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            settings.contentLabel = '–ü—Ä–∏—á–∏–Ω–∞';
            
            switch (actionSubtype) {
                case 'ban':
                    settings.title = 'üî® –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    settings.color = 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π
                    break;
                case 'kick':
                    settings.title = 'üë¢ –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    settings.color = 0xFF9900; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                case 'mute':
                    settings.title = 'üîá –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    settings.color = 0xFFCC00; // –ñ–µ–ª—Ç—ã–π
                    break;
                case 'warn':
                    settings.title = '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
                    settings.color = 0xFFFF00; // –ñ–µ–ª—Ç—ã–π
                    break;
                case 'unmute':
                    settings.title = 'üîä –†–∞–∑–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'unban':
                    settings.title = 'üîì –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                default:
                    settings.title = 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è';
            }
            break;
            
        case 'system':
            settings.color = 0xFFFF00; // –ñ–µ–ª—Ç—ã–π
            settings.title = '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ';
            settings.contentLabel = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
            
            switch (actionSubtype) {
                case 'bot_start':
                    settings.title = 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'level_up':
                    settings.title = 'üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è';
                    settings.color = 0x00FFAA; // –ë–∏—Ä—é–∑–æ–≤—ã–π
                    break;
                case 'button_click':
                    settings.title = 'üñ±Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏';
                    settings.color = 0xAA00FF; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    break;
                case 'auto_unmute':
                    settings.title = 'üîä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                case 'user_join':
                    settings.title = 'üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ <:URA:1380225089387102358>';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'user_leave':
                    settings.title = 'üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä, –ø–∏–¥–æ—Ä –±–ª—è—Ç—å'; // –∫—Ä–∞—Ö —Å–∫–æ—Ä–æ
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'user_banned':
                    settings.title = 'üî® –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω';
                    settings.color = 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π
                    break;
                case 'user_unbanned':
                    settings.title = 'üîì –£—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–∑–±–∞–Ω–µ–Ω';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                case 'member_nickname_change':
                    settings.title = 'üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞';
                    settings.color = 0x00AAFF; // –ì–æ–ª—É–±–æ–π
                    break;
                case 'member_roles_add':
                    settings.title = '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π'; 
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'member_roles_remove':
                    settings.title = '‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'member_timeout_add':
                    settings.title = '‚è∞ –¢–∞–π–º–∞—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                case 'member_timeout_remove':
                    settings.title = '‚è∞ –¢–∞–π–º–∞—É—Ç —Å–Ω—è—Ç';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è —Ä–æ–ª–µ–π
                case 'role_create':
                    settings.title = 'üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'role_delete':
                    settings.title = 'üè∑Ô∏è –£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'role_update':
                    settings.title = 'üè∑Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è –∫–∞–Ω–∞–ª–æ–≤
                case 'channel_create':
                    settings.title = 'üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'channel_delete':
                    settings.title = 'üìù –£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'channel_update':
                    settings.title = 'üìù –ò–∑–º–µ–Ω–µ–Ω –∫–∞–Ω–∞–ª';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
                case 'emoji_create':
                    settings.title = 'üòÄ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'emoji_delete':
                    settings.title = 'üòÄ –£–¥–∞–ª–µ–Ω —ç–º–æ–¥–∑–∏';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'emoji_update':
                    settings.title = 'üòÄ –ò–∑–º–µ–Ω–µ–Ω —ç–º–æ–¥–∑–∏';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                case 'sticker_create':
                    settings.title = 'üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'sticker_delete':
                    settings.title = 'üè∑Ô∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'sticker_update':
                    settings.title = 'üè∑Ô∏è –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∏–∫–µ—Ä';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è –≥–∏–ª—å–¥–∏–∏
                case 'guild_update':
                    settings.title = 'üè∞ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                    
                // –°–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                case 'voice_join':
                    settings.title = 'üé§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É';
                    settings.color = 0x00FF00; // –ó–µ–ª–µ–Ω—ã–π
                    break;
                case 'voice_leave':
                    settings.title = 'üé§ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞';
                    settings.color = 0xFF5555; // –ö—Ä–∞—Å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                    break;
                case 'voice_move':
                    settings.title = 'üé§ –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏';
                    settings.color = 0xFFAA00; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                    
                default:
                    // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            break;
            
        case 'error':
            settings.title = '‚ùå –û—à–∏–±–∫–∞: ' + actionSubtype;
            settings.color = 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π
            settings.contentLabel = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ';
            break;
            
        case 'security':
            settings.title = 'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å';
            settings.color = 0xFF00FF; // –ü—É—Ä–ø—É—Ä–Ω—ã–π
            settings.contentLabel = '–î–µ—Ç–∞–ª–∏';
            
            switch (actionSubtype) {
                case 'raid_detected':
                    settings.title = '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–π–¥';
                    settings.color = 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π
                    break;
                case 'spam_detected':
                    settings.title = 'üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º';
                    settings.color = 0xFF9900; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    break;
                default:
                    // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            break;
            
        case 'ai_moderation':
            settings.title = 'ü§ñ –ò–ò –ú–æ–¥–µ—Ä–∞—Ü–∏—è';
            settings.color = 0x9900FF; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            settings.contentLabel = '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏';
            break;
            
        default:
            // –û—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    }
    
    return settings;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * @param {string} actionType - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @param {string} actionSubtype - –ü–æ–¥—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
 * @returns {Object} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
function formatMetadata(metadata, actionType, actionSubtype) {
    const formatted = {};
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    switch (actionType) {
        case 'message':
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
            if (metadata.attachments > 0) {
                formatted['–í–ª–æ–∂–µ–Ω–∏—è'] = `${metadata.attachments} —Ñ–∞–π–ª(–æ–≤)`;
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
                if (Array.isArray(metadata.attachments)) {
                    const attachmentsList = metadata.attachments.map(a => 
                        `[${a.name}](${a.url}) (${formatBytes(a.size)})`
                    ).join('\n');
                    
                    if (attachmentsList) {
                        formatted['–°–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π'] = attachmentsList.substring(0, 1024);
                    }
                }
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
            if (metadata.mentions && (metadata.mentions.users > 0 || metadata.mentions.roles > 0 || metadata.mentions.everyone)) {
                const mentionParts = [];
                
                if (metadata.mentions.users > 0) mentionParts.push(`${metadata.mentions.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                if (metadata.mentions.roles > 0) mentionParts.push(`${metadata.mentions.roles} —Ä–æ–ª–µ–π`);
                if (metadata.mentions.everyone) mentionParts.push(`@everyone/@here`);
                
                formatted['–£–ø–æ–º–∏–Ω–∞–Ω–∏—è'] = mentionParts.join(', ');
            }
            
            // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            if (actionSubtype === 'edit' && metadata.oldContent && metadata.newContent) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if (metadata.oldContent !== metadata.newContent) {
                    formatted['–ë—ã–ª–æ'] = '```\n' + (metadata.oldContent.substring(0, 500) || '*–ø—É—Å—Ç–æ*') + '\n```';
                    formatted['–°—Ç–∞–ª–æ'] = '```\n' + (metadata.newContent.substring(0, 500) || '*–ø—É—Å—Ç–æ*') + '\n```';
                }
            }
            break;
            
        case 'command':
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
            if (metadata.options && Array.isArray(metadata.options) && metadata.options.length > 0) {
                const optionsFormatted = metadata.options.map(opt => {
                    if (opt.options) {
                        return `${opt.name}: ${opt.options.map(subOpt => `${subOpt.name}=${subOpt.value}`).join(', ')}`;
                    }
                    return `${opt.name}=${opt.value}`;
                }).join('\n');
                
                if (optionsFormatted) {
                    formatted['–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'] = '```\n' + optionsFormatted + '\n```';
                }
            }
            
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
            if (metadata.error) {
                formatted['–û—à–∏–±–∫–∞'] = metadata.error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            }
            break;
            
        case 'moderation':
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π
            if (metadata.duration) {
                formatted['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] = metadata.duration;
            }
            break;
            
        case 'system':
            // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if (actionSubtype === 'level_up') {
                formatted['–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å'] = metadata.oldLevel;
                formatted['–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å'] = metadata.newLevel;
                formatted['–û–ø—ã—Ç'] = metadata.xp;
            } else if (actionSubtype === 'bot_start') {
                formatted['–í–µ—Ä—Å–∏—è'] = metadata.version;
                formatted['–°–±–æ—Ä–∫–∞'] = metadata.build;
                formatted['–°–µ—Ä–≤–µ—Ä–æ–≤'] = metadata.servers;
                formatted['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'] = metadata.users;
            } else if (actionSubtype === 'user_join') {
                formatted['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'] = new Date(metadata.createdAt).toLocaleString('ru-RU');
                formatted['–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞'] = `${metadata.accountAge} –¥–Ω–µ–π`;
            } else if (actionSubtype === 'user_leave') {
                if (metadata.roles && metadata.roles.length > 0) {
                    formatted['–†–æ–ª–∏'] = metadata.roles.join(', ');
                }
                if (metadata.joinedAt) {
                    formatted['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è'] = new Date(metadata.joinedAt).toLocaleString('ru-RU');
                }
            } else if (actionSubtype === 'user_banned' || actionSubtype === 'user_unbanned') {
                if (metadata.reason) {
                    formatted['–ü—Ä–∏—á–∏–Ω–∞'] = metadata.reason;
                }
            } else if (actionSubtype === 'member_nickname_change') {
                formatted['–°—Ç–∞—Ä—ã–π –Ω–∏–∫–Ω–µ–π–º'] = metadata.oldNickname;
                formatted['–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º'] = metadata.newNickname;
            } else if (actionSubtype === 'member_roles_add' || actionSubtype === 'member_roles_remove') {
                if (metadata.roles && metadata.roles.length > 0) {
                    const rolesList = metadata.roles.map(role => 
                        `<@&${role.id}> (${role.name})`
                    ).join('\n');
                    
                    formatted['–†–æ–ª–∏'] = rolesList;
                }
            } else if (actionSubtype === 'member_timeout_add') {
                formatted['–î–æ'] = new Date(metadata.until).toLocaleString('ru-RU');
                formatted['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] = formatTimeUntil(metadata.until);
            } else if (actionSubtype === 'role_create') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
                formatted['–¶–≤–µ—Ç'] = metadata.color;
                formatted['–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ'] = metadata.hoist ? '–î–∞' : '–ù–µ—Ç';
                formatted['–£–ø–æ–º–∏–Ω–∞–µ–º–∞—è'] = metadata.mentionable ? '–î–∞' : '–ù–µ—Ç';
                formatted['–ü–æ–∑–∏—Ü–∏—è'] = metadata.position;
                
                if (metadata.permissions && metadata.permissions.length > 0) {
                    formatted['–ü—Ä–∞–≤–∞'] = '```\n' + metadata.permissions.join(', ') + '\n```';
                }
            } else if (actionSubtype === 'role_delete') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
                formatted['–¶–≤–µ—Ç'] = metadata.color;
                formatted['–ü–æ–∑–∏—Ü–∏—è'] = metadata.position;
            } else if (actionSubtype === 'role_update') {
                if (metadata.changes) {
                    if (metadata.changes.name) {
                        formatted['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'] = `${metadata.changes.name.old} ‚Üí ${metadata.changes.name.new}`;
                    }
                    
                    if (metadata.changes.color) {
                        formatted['–¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω'] = `${metadata.changes.color.old} ‚Üí ${metadata.changes.color.new}`;
                    }
                    
                    if (metadata.changes.hoist !== undefined) {
                        formatted['–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ'] = `${metadata.changes.hoist.old ? '–î–∞' : '–ù–µ—Ç'} ‚Üí ${metadata.changes.hoist.new ? '–î–∞' : '–ù–µ—Ç'}`;
                    }
                    
                    if (metadata.changes.mentionable !== undefined) {
                        formatted['–£–ø–æ–º–∏–Ω–∞–µ–º–æ—Å—Ç—å'] = `${metadata.changes.mentionable.old ? '–î–∞' : '–ù–µ—Ç'} ‚Üí ${metadata.changes.mentionable.new ? '–î–∞' : '–ù–µ—Ç'}`;
                    }
                    
                    if (metadata.changes.position) {
                        formatted['–ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞'] = `${metadata.changes.position.old} ‚Üí ${metadata.changes.position.new}`;
                    }
                    
                    if (metadata.changes.permissions) {
                        if (metadata.changes.permissions.added && metadata.changes.permissions.added.length > 0) {
                            formatted['–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞'] = '```\n' + metadata.changes.permissions.added.join(', ') + '\n```';
                        }
                        
                        if (metadata.changes.permissions.removed && metadata.changes.permissions.removed.length > 0) {
                            formatted['–£–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∞'] = '```\n' + metadata.changes.permissions.removed.join(', ') + '\n```';
                        }
                    }
                }
            } else if (actionSubtype === 'channel_create' || actionSubtype === 'channel_delete') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
                formatted['–¢–∏–ø'] = formatChannelType(metadata.type);
                
                if (metadata.parentId) {
                    formatted['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = `<#${metadata.parentId}>`;
                }
                
                formatted['–ü–æ–∑–∏—Ü–∏—è'] = metadata.position;
            } else if (actionSubtype === 'channel_update') {
                if (metadata.changes) {
                    if (metadata.changes.name) {
                        formatted['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'] = `${metadata.changes.name.old} ‚Üí ${metadata.changes.name.new}`;
                    }
                    
                    if (metadata.changes.parentId) {
                        const oldParent = metadata.changes.parentId.oldParentName ? metadata.changes.parentId.oldParentName : '–ù–µ—Ç';
                        const newParent = metadata.changes.parentId.newParentName ? metadata.changes.parentId.newParentName : '–ù–µ—Ç';
                        
                        formatted['–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞'] = `${oldParent} ‚Üí ${newParent}`;
                    }
                    
                    if (metadata.changes.position) {
                        formatted['–ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞'] = `${metadata.changes.position.old} ‚Üí ${metadata.changes.position.new}`;
                    }
                    
                    if (metadata.changes.topic) {
                        formatted['–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞'] = `${metadata.changes.topic.old} ‚Üí ${metadata.changes.topic.new}`;
                    }
                    
                    if (metadata.changes.nsfw !== undefined) {
                        formatted['NSFW'] = `${metadata.changes.nsfw.old ? '–î–∞' : '–ù–µ—Ç'} ‚Üí ${metadata.changes.nsfw.new ? '–î–∞' : '–ù–µ—Ç'}`;
                    }
                    
                    if (metadata.changes.slowmode !== undefined) {
                        formatted['–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º'] = `${formatSlowmode(metadata.changes.slowmode.old)} ‚Üí ${formatSlowmode(metadata.changes.slowmode.new)}`;
                    }
                }
            } else if (actionSubtype === 'emoji_create') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
                formatted['–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'] = metadata.animated ? '–î–∞' : '–ù–µ—Ç';
                formatted['URL'] = metadata.url;
            } else if (actionSubtype === 'emoji_delete') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
            } else if (actionSubtype === 'emoji_update') {
                formatted['–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'] = metadata.oldName;
                formatted['–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'] = metadata.newName;
                formatted['URL'] = metadata.url;
            } else if (actionSubtype === 'sticker_create') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
                formatted['–û–ø–∏—Å–∞–Ω–∏–µ'] = metadata.description || '–ù–µ—Ç';
                formatted['–¢–µ–≥–∏'] = metadata.tags || '–ù–µ—Ç';
                formatted['URL'] = metadata.url;
            } else if (actionSubtype === 'sticker_delete') {
                formatted['–ù–∞–∑–≤–∞–Ω–∏–µ'] = metadata.name;
            } else if (actionSubtype === 'sticker_update') {
                if (metadata.changes) {
                    if (metadata.changes.name) {
                        formatted['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'] = `${metadata.changes.name.old} ‚Üí ${metadata.changes.name.new}`;
                    }
                    
                    if (metadata.changes.description) {
                        formatted['–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'] = `${metadata.changes.description.old || '–ù–µ—Ç'} ‚Üí ${metadata.changes.description.new || '–ù–µ—Ç'}`;
                    }
                    
                    if (metadata.changes.tags) {
                        formatted['–¢–µ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω—ã'] = `${metadata.changes.tags.old || '–ù–µ—Ç'} ‚Üí ${metadata.changes.tags.new || '–ù–µ—Ç'}`;
                    }
                }
            } else if (actionSubtype === 'guild_update') {
                if (metadata.changes) {
                    if (metadata.changes.name) {
                        formatted['–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'] = `${metadata.changes.name.old} ‚Üí ${metadata.changes.name.new}`;
                    }
                    
                    if (metadata.changes.description) {
                        formatted['–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'] = `${metadata.changes.description.old} ‚Üí ${metadata.changes.description.new}`;
                    }
                    
                    if (metadata.changes.vanityURL) {
                        formatted['–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞'] = `${metadata.changes.vanityURL.old} ‚Üí ${metadata.changes.vanityURL.new}`;
                    }
                    
                    if (metadata.changes.owner) {
                        formatted['–í–ª–∞–¥–µ–ª–µ—Ü –∏–∑–º–µ–Ω–µ–Ω'] = `${metadata.changes.owner.old.tag} (${metadata.changes.owner.old.id}) ‚Üí ${metadata.changes.owner.new.tag} (${metadata.changes.owner.new.id})`;
                    }
                    
                    if (metadata.changes.icon) {
                        formatted['–ò–∫–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞'] = '–ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞';
                    }
                    
                    if (metadata.changes.banner) {
                        formatted['–ë–∞–Ω–Ω–µ—Ä –∏–∑–º–µ–Ω–µ–Ω'] = '–ë–∞–Ω–Ω–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω';
                    }
                }
            } else if (actionSubtype === 'voice_join' || actionSubtype === 'voice_leave') {
                formatted['–ö–∞–Ω–∞–ª'] = `<#${metadata.channelId}> (${metadata.channelName})`;
            } else if (actionSubtype === 'voice_move') {
                formatted['–ò–∑ –∫–∞–Ω–∞–ª–∞'] = `<#${metadata.oldChannelId}> (${metadata.oldChannelName})`;
                formatted['–í –∫–∞–Ω–∞–ª'] = `<#${metadata.newChannelId}> (${metadata.newChannelName})`;
            } else if (actionSubtype === 'auto_unmute') {
                formatted['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞'] = metadata.muteDuration;
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º JSON
                formatted['–î–µ—Ç–∞–ª–∏'] = '```json\n' + JSON.stringify(metadata, null, 2).substring(0, 1000) + '\n```';
            }
            break;
            
        case 'error':
            // –î–ª—è –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
            if (metadata.stack) {
                formatted['–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤'] = '```\n' + metadata.stack.substring(0, 1000) + '\n```';
            }
            if (metadata.context) {
                formatted['–ö–æ–Ω—Ç–µ–∫—Å—Ç'] = metadata.context;
            }
            break;
            
        default:
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º JSON
            formatted['–î–µ—Ç–∞–ª–∏'] = '```json\n' + JSON.stringify(metadata, null, 2).substring(0, 1000) + '\n```';
    }
    
    return formatted;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
function formatBytes(bytes) {
    if (bytes === 0) return '0 –ë–∞–π—Ç';
    
    const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    
    return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
 * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
 */
async function searchLogs(filters = {}, limit = 10) {
    try {
        return await ActionLog.find(filters).sort({ timestamp: -1 }).limit(limit);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ–≥–æ–≤:', error);
        return [];
    }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Discord
 */
async function logUserMessage(message) {
    if (message.author.bot) return;
    
    await logAdvancedAction({
        actionType: 'message',
        actionSubtype: 'create',
        userId: message.author.id,
        guildId: message.guild.id,
        channelId: message.channel.id,
        messageId: message.id,
        content: message.content,
        metadata: {
            attachments: message.attachments.size,
            embeds: message.embeds.length,
            mentions: {
                users: message.mentions.users.size,
                roles: message.mentions.roles.size,
                everyone: message.mentions.everyone
            }
        },
        guild: message.guild
    });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} oldMessage - –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {Object} newMessage - –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function logMessageEdit(oldMessage, newMessage) {
    if (oldMessage.author.bot) return;
    
    await logAdvancedAction({
        actionType: 'message',
        actionSubtype: 'edit',
        userId: oldMessage.author.id,
        guildId: oldMessage.guild.id,
        channelId: oldMessage.channel.id,
        messageId: oldMessage.id,
        content: `**–î–æ:** ${oldMessage.content}\n**–ü–æ—Å–ª–µ:** ${newMessage.content}`,
        metadata: {
            oldContent: oldMessage.content,
            newContent: newMessage.content,
            attachments: newMessage.attachments.size,
            embeds: newMessage.embeds.length
        },
        guild: oldMessage.guild
    });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} message - –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function logMessageDelete(message) {
    if (message.author.bot) return;
    
    await logAdvancedAction({
        actionType: 'message',
        actionSubtype: 'delete',
        userId: message.author.id,
        guildId: message.guild.id,
        channelId: message.channel.id,
        messageId: message.id,
        content: message.content,
        metadata: {
            attachments: Array.from(message.attachments.values()).map(a => ({
                name: a.name,
                url: a.url,
                size: a.size
            })),
            embeds: message.embeds.length
        },
        guild: message.guild
    });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 * @param {boolean} successful - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
 * @param {Object} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
 */
async function logCommand(interaction, successful = true, error = null) {
    const options = interaction.options?.data || [];
    const optionsString = options.map(opt => {
        if (opt.options) {
            return `${opt.name}: ${opt.options.map(subOpt => `${subOpt.name}=${subOpt.value}`).join(', ')}`;
        }
        return `${opt.name}=${opt.value}`;
    }).join(', ');
    
    await logAdvancedAction({
        actionType: 'command',
        actionSubtype: interaction.commandName,
        userId: interaction.user.id,
        guildId: interaction.guild.id,
        channelId: interaction.channel.id,
        content: `/${interaction.commandName} ${optionsString}`,
        metadata: {
            options: options,
            successful,
            error: error ? {
                message: error.message,
                stack: error.stack
            } : null
        },
        successful,
        guild: interaction.guild
    });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
 */
async function logModeration(options) {
    const {
        guild,
        moderator,
        target,
        action,
        reason,
        duration = null
    } = options;
    
    await logAdvancedAction({
        actionType: 'moderation',
        actionSubtype: action,
        userId: moderator.id,
        targetId: target.id,
        guildId: guild.id,
        content: reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
        metadata: {
            duration,
            actionType: action
        },
        guild
    });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
 * @param {Object} guild - –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ Discord
 * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 */
async function logSystemEvent(guild, event, data = {}) {
    await logAdvancedAction({
        actionType: 'system',
        actionSubtype: event,
        guildId: guild.id,
        content: `–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`,
        metadata: data,
        guild
    });
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
 * @param {Object} guild - –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ Discord
 * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param {string} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
async function logError(guild, error, context = '') {
    await logAdvancedAction({
        actionType: 'error',
        actionSubtype: error.name,
        guildId: guild.id,
        content: `${context}: ${error.message}`,
        metadata: {
            stack: error.stack,
            context
        },
        successful: false,
        guild
    });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {number} type - –¢–∏–ø –∫–∞–Ω–∞–ª–∞
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
 */
function formatChannelType(type) {
    const types = {
        0: '–¢–µ–∫—Å—Ç–æ–≤—ã–π',
        2: '–ì–æ–ª–æ—Å–æ–≤–æ–π',
        4: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        5: '–ù–æ–≤–æ—Å—Ç–∏',
        13: '–¢—Ä–∏–±—É–Ω–∞',
        15: '–§–æ—Ä—É–º'
    };
    
    return types[type] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π (${type})`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 * @param {number} seconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatSlowmode(seconds) {
    if (seconds === 0) return '–í—ã–∫–ª—é—á–µ–Ω';
    if (seconds < 60) return `${seconds} —Å–µ–∫.`;
    if (seconds < 3600) return `${Math.floor(seconds / 60)} –º–∏–Ω.`;
    return `${Math.floor(seconds / 3600)} —á. ${Math.floor((seconds % 3600) / 60)} –º–∏–Ω.`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –¥–∞—Ç—ã
 * @param {Date|string} date - –î–∞—Ç–∞
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatTimeUntil(date) {
    const now = new Date();
    const target = new Date(date);
    const diff = target - now;
    
    if (diff <= 0) return '–ò—Å—Ç–µ–∫–ª–æ';
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    let result = '';
    if (days > 0) result += `${days} –¥. `;
    if (hours > 0 || days > 0) result += `${hours} —á. `;
    result += `${minutes} –º–∏–Ω.`;
    
    return result;
}

module.exports = {
    logAdvancedAction,
    logUserMessage,
    logMessageEdit,
    logMessageDelete,
    logCommand,
    logModeration,
    logSystemEvent,
    logError,
    searchLogs,
    formatChannelType,
    formatSlowmode,
    formatTimeUntil
}; 