const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { ActionLog } = require('../../models/schema');
const { searchLogs } = require('../../utils/advancedLogger');
const config = require('../../config');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('logs')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addSubcommand(subcommand =>
            subcommand
                .setName('search')
                .setDescription('–ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º')
                .addStringOption(option =>
                    option.setName('type')
                        .setDescription('–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è')
                        .setRequired(false)
                        .addChoices(
                            { name: '–°–æ–æ–±—â–µ–Ω–∏—è', value: 'message' },
                            { name: '–ö–æ–º–∞–Ω–¥—ã', value: 'command' },
                            { name: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è', value: 'moderation' },
                            { name: '–°–∏—Å—Ç–µ–º–∞', value: 'system' },
                            { name: '–û—à–∏–±–∫–∏', value: 'error' },
                            { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', value: 'security' }
                        ))
                .addStringOption(option =>
                    option.setName('user')
                        .setDescription('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                        .setRequired(false))
                .addStringOption(option =>
                    option.setName('channel')
                        .setDescription('ID –∫–∞–Ω–∞–ª–∞')
                        .setRequired(false))
                .addIntegerOption(option =>
                    option.setName('limit')
                        .setDescription('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                        .setRequired(false)
                        .setMinValue(1)
                        .setMaxValue(25)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('stats')
                .setDescription('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('view')
                .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞ –ø–æ ID')
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID –ª–æ–≥–∞')
                        .setRequired(true))),
    
    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        
        const subcommand = interaction.options.getSubcommand();
        
        try {
            switch (subcommand) {
                case 'search':
                    await handleSearch(interaction);
                    break;
                case 'stats':
                    await handleStats(interaction);
                    break;
                case 'view':
                    await handleView(interaction);
                    break;
                default:
                    await interaction.editReply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã logs:', error);
            await interaction.editReply({
                content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`,
                ephemeral: true
            });
        }
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 */
async function handleSearch(interaction) {
    const type = interaction.options.getString('type');
    const userId = interaction.options.getString('user');
    const channelId = interaction.options.getString('channel');
    const limit = interaction.options.getInteger('limit') || 10;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    const filter = { guildId: interaction.guild.id };
    if (type) filter.actionType = type;
    if (userId) filter.userId = userId;
    if (channelId) filter.channelId = channelId;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    const logs = await searchLogs(filter, limit);
    
    if (logs.length === 0) {
        await interaction.editReply('–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const embed = new EmbedBuilder()
        .setTitle('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤')
        .setColor('#0099ff')
        .setDescription(`–ù–∞–π–¥–µ–Ω–æ ${logs.length} –∑–∞–ø–∏—Å–µ–π`)
        .setTimestamp();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥ –≤ —ç–º–±–µ–¥
    for (let i = 0; i < Math.min(logs.length, 10); i++) {
        const log = logs[i];
        const timestamp = new Date(log.timestamp).toLocaleString('ru-RU');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        let content = log.content;
        if (content && content.length > 100) {
            content = content.substring(0, 97) + '...';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userInfo = log.userId ? `ID: ${log.userId}` : '–ù–µ—Ç';
        try {
            if (log.userId) {
                const user = await interaction.client.users.fetch(log.userId);
                userInfo = user.tag;
            }
        } catch (e) {}
        
        embed.addFields({
            name: `${timestamp} - ${log.actionType}${log.actionSubtype ? ` (${log.actionSubtype})` : ''}`,
            value: `**ID:** \`${log._id}\`\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${userInfo}\n**–ö–∞–Ω–∞–ª:** ${log.channelId ? `<#${log.channelId}>` : '–ù–µ—Ç'}\n**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** ${content || '–ù–µ—Ç'}`
        });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ª–æ–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
    if (logs.length > 10) {
        embed.addFields({
            name: '–ò –µ—â–µ...',
            value: `–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ ${logs.length} –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`
        });
    }
    
    await interaction.editReply({ embeds: [embed] });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 */
async function handleStats(interaction) {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ª–æ–≥–æ–≤
    const stats = await ActionLog.aggregate([
        { $match: { guildId: interaction.guild.id } },
        { $group: { _id: '$actionType', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    const totalLogs = await ActionLog.countDocuments({ guildId: interaction.guild.id });
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const last24Hours = await ActionLog.countDocuments({
        guildId: interaction.guild.id,
        timestamp: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const embed = new EmbedBuilder()
        .setTitle('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
        .setColor('#00ff00')
        .setDescription(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **${totalLogs}**\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: **${last24Hours}**`)
        .setTimestamp();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    if (stats.length > 0) {
        const statsText = stats.map(stat => `**${stat._id}**: ${stat.count}`).join('\n');
        embed.addFields({ name: '–ü–æ —Ç–∏–ø–∞–º', value: statsText });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
    embed.setFooter({ 
        text: `${config.version} ‚Ä¢ ${config.build}`,
        iconURL: interaction.client.user.displayAvatarURL()
    });
    
    await interaction.editReply({ embeds: [embed] });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞
 * @param {Object} interaction - –û–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Discord
 */
async function handleView(interaction) {
    const logId = interaction.options.getString('id');
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥ –ø–æ ID
        const log = await ActionLog.findById(logId);
        
        if (!log || log.guildId !== interaction.guild.id) {
            await interaction.editReply('–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–≥–µ
        const embed = new EmbedBuilder()
            .setTitle(`üìù –õ–æ–≥: ${log.actionType}${log.actionSubtype ? ` (${log.actionSubtype})` : ''}`)
            .setColor(log.successful ? '#00ff00' : '#ff0000')
            .setTimestamp(log.timestamp);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (log.userId) {
            try {
                const user = await interaction.client.users.fetch(log.userId);
                embed.setAuthor({ 
                    name: user.tag, 
                    iconURL: user.displayAvatarURL({ dynamic: true }) 
                });
                embed.addFields({ name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `${user.tag} (${user.id})`, inline: true });
            } catch (e) {
                embed.addFields({ name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `ID: ${log.userId}`, inline: true });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        if (log.targetId) {
            try {
                const target = await interaction.client.users.fetch(log.targetId);
                embed.addFields({ name: '–¶–µ–ª—å', value: `${target.tag} (${target.id})`, inline: true });
            } catch (e) {
                embed.addFields({ name: '–¶–µ–ª—å', value: `ID: ${log.targetId}`, inline: true });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        if (log.channelId) {
            embed.addFields({ name: '–ö–∞–Ω–∞–ª', value: `<#${log.channelId}>`, inline: true });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (log.content) {
            embed.addFields({ 
                name: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ', 
                value: log.content.length > 1024 
                    ? log.content.substring(0, 1021) + '...' 
                    : log.content,
                inline: false 
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (log.metadata && Object.keys(log.metadata).length > 0) {
            const metadataString = JSON.stringify(log.metadata, null, 2);
            if (metadataString.length <= 1024) {
                embed.addFields({ name: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', value: '```json\n' + metadataString + '\n```', inline: false });
            } else {
                embed.addFields({ name: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', value: '```json\n' + metadataString.substring(0, 1000) + '...\n```', inline: false });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–ø–∏—Å–∏
        embed.setFooter({ 
            text: `Log ID: ${log._id}`,
            iconURL: interaction.client.user.displayAvatarURL()
        });
        
        await interaction.editReply({ embeds: [embed] });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–∞:', error);
        await interaction.editReply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–∞: ${error.message}`);
    }
} 