const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { Clan } = require('../../models/schema');
const { clanTasks, rewardClanForTask, getRandomTask, createTasksEmbed, createRewardEmbed } = require('../../features/clanSystem');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('clantask')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è –∫–ª–∞–Ω–æ–≤')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('reward')
                .setDescription('–í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∫–ª–∞–Ω—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')
                .addStringOption(option => 
                    option.setName('clan')
                        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞')
                        .setRequired(true))
                .addStringOption(option => 
                    option.setName('task')
                        .setDescription('ID –∑–∞–¥–∞–Ω–∏—è')
                        .setRequired(true)
                        .addChoices(
                            { name: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: 'activity' },
                            { name: '–ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: 'members' },
                            { name: '–£—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö', value: 'events' },
                            { name: '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', value: 'cooperation' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('random')
                .setDescription('–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞'))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        
        switch (subcommand) {
            case 'list':
                await listTasks(interaction);
                break;
            case 'reward':
                await rewardClan(interaction);
                break;
            case 'random':
                await getRandomClanTask(interaction);
                break;
        }
    }
};

async function listTasks(interaction) {
    const embed = createTasksEmbed();
    await interaction.reply({ embeds: [embed] });
}

async function rewardClan(interaction) {
    const clanName = interaction.options.getString('clan');
    const taskId = interaction.options.getString('task');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
        const clan = await Clan.findOne({ name: clanName });
        
        if (!clan) {
            return interaction.reply({ content: '‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!', ephemeral: true });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        const task = clanTasks.find(t => t.id === taskId);
        
        if (!task) {
            return interaction.reply({ content: '‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', ephemeral: true });
        }
        
        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        const rewardInfo = await rewardClanForTask(clanName, taskId);
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≥—Ä–∞–¥–µ
        const embed = createRewardEmbed(rewardInfo);
        
        await interaction.reply({ embeds: [embed] });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã –∫–ª–∞–Ω—É: ${error.message}`);
        await interaction.reply({ 
            content: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã: ${error.message}`,
            ephemeral: true 
        });
    }
}

async function getRandomClanTask(interaction) {
    const userId = interaction.user.id;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clan = await Clan.findOne({ $or: [{ owner: userId }, { members: userId }] });
    
    if (!clan) {
        return interaction.reply({ content: '‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!', ephemeral: true });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const task = getRandomTask();
    
    const embed = new EmbedBuilder()
        .setTitle(`üìã –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞–Ω–∞ ${clan.emoji} ${clan.name}`)
        .setDescription(`–í–∞—à–µ–º—É –∫–ª–∞–Ω—É –≤—ã–ø–∞–ª–æ –∑–∞–¥–∞–Ω–∏–µ: **${task.name}**`)
        .addFields(
            { name: '–û–ø–∏—Å–∞–Ω–∏–µ', value: task.description },
            { name: '–°–ª–æ–∂–Ω–æ—Å—Ç—å', value: task.difficulty, inline: true },
            { name: 'ID –∑–∞–¥–∞–Ω–∏—è', value: `\`${task.id}\``, inline: true },
            { name: '–ù–∞–≥—Ä–∞–¥–∞', value: `${task.reward.exp} XP, ${task.reward.power} —Å–∏–ª—ã`, inline: true }
        )
        .addFields({
            name: '–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å',
            value: '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –≤–∞–º –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/clantask reward`.'
        })
        .setColor('#4B0082')
        .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
} 