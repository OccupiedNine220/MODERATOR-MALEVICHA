const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { addTempRole, removeTempRole, getMemberTempRoles, updateTempRoleDuration } = require('../../features/tempRoleSystem');
const moment = require('moment');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('temprole')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏')
        .addSubcommand(subcommand =>
            subcommand
                .setName('add')
                .setDescription('–í—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å')
                .addUserOption(option =>
                    option
                        .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å')
                        .setRequired(true)
                )
                .addRoleOption(option =>
                    option
                        .setName('—Ä–æ–ª—å')
                        .setDescription('–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å')
                        .setRequired(true)
                )
                .addStringOption(option => 
                    option
                        .setName('–≤—Ä–µ–º—è')
                        .setDescription('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1h, 2d, 1w)')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option
                        .setName('–ø—Ä–∏—á–∏–Ω–∞')
                        .setDescription('–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                .addUserOption(option =>
                    option
                        .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å')
                        .setRequired(true)
                )
                .addRoleOption(option =>
                    option
                        .setName('—Ä–æ–ª—å')
                        .setDescription('–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option
                        .setName('–ø—Ä–∏—á–∏–Ω–∞')
                        .setDescription('–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                .addUserOption(option =>
                    option
                        .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('update')
                .setDescription('–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏')
                .addUserOption(option =>
                    option
                        .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é')
                        .setRequired(true)
                )
                .addRoleOption(option =>
                    option
                        .setName('—Ä–æ–ª—å')
                        .setDescription('–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
                        .setRequired(true)
                )
                .addStringOption(option => 
                    option
                        .setName('–≤—Ä–µ–º—è')
                        .setDescription('–ù–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1h, 2d, 1w)')
                        .setRequired(true)
                )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),
    
    async execute(interaction) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–æ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
        if (!interaction.guild.members.me.permissions.has(PermissionFlagsBits.ManageRoles)) {
            return interaction.reply({
                content: '‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ!',
                ephemeral: true
            });
        }
        
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === 'add') {
            await this.addTempRole(interaction);
        } else if (subcommand === 'remove') {
            await this.removeTempRole(interaction);
        } else if (subcommand === 'list') {
            await this.listTempRoles(interaction);
        } else if (subcommand === 'update') {
            await this.updateTempRole(interaction);
        }
    },
    
    async addTempRole(interaction) {
        const member = interaction.options.getMember('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const role = interaction.options.getRole('—Ä–æ–ª—å');
        const timeString = interaction.options.getString('–≤—Ä–µ–º—è');
        const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞
        if (role.position >= interaction.guild.members.me.roles.highest.position) {
            return interaction.reply({
                content: '‚ùå –≠—Ç–∞ —Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ –∏–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å –º–æ–µ–π –≤—ã—Å—à–µ–π —Ä–æ–ª—å—é. –Ø –Ω–µ –º–æ–≥—É –µ–µ –≤—ã–¥–∞–≤–∞—Ç—å.',
                ephemeral: true
            });
        }
        
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
        const duration = this.parseDuration(timeString);
        if (!duration) {
            return interaction.reply({
                content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç Xw (–Ω–µ–¥–µ–ª–∏), Xd (–¥–Ω–∏), Xh (—á–∞—Å—ã), Xm (–º–∏–Ω—É—Ç—ã).',
                ephemeral: true
            });
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        const durationMs = duration.value;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await interaction.deferReply();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å
        const result = await addTempRole(member, role, durationMs, `${reason} (–≤—ã–¥–∞–Ω–æ ${interaction.user.tag})`);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                .setColor('#00ff00')
                .setDescription(`–†–æ–ª—å ${role} –±—ã–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member}`)
                .addFields(
                    { name: '‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: duration.text, inline: true },
                    { name: 'üìù –ü—Ä–∏—á–∏–Ω–∞', value: reason, inline: true },
                    { name: 'üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: `${interaction.user}`, inline: true }
                )
                .setTimestamp();
            
            await interaction.followUp({ embeds: [embed] });
        } else {
            await interaction.followUp({
                content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏: ${result.message}`,
                ephemeral: true
            });
        }
    },
    
    async removeTempRole(interaction) {
        const member = interaction.options.getMember('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const role = interaction.options.getRole('—Ä–æ–ª—å');
        const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await interaction.deferReply();
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å
        const result = await removeTempRole(member, role, `${reason} (—É–¥–∞–ª–µ–Ω–æ ${interaction.user.tag})`);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞')
                .setColor('#ff9900')
                .setDescription(`–†–æ–ª—å ${role} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member}`)
                .addFields(
                    { name: 'üìù –ü—Ä–∏—á–∏–Ω–∞', value: reason, inline: true },
                    { name: 'üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: `${interaction.user}`, inline: true }
                )
                .setTimestamp();
            
            await interaction.followUp({ embeds: [embed] });
        } else {
            await interaction.followUp({
                content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏: ${result.message}`,
                ephemeral: true
            });
        }
    },
    
    async listTempRoles(interaction) {
        const member = interaction.options.getMember('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await interaction.deferReply();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
        const tempRoles = await getMemberTempRoles(member);
        
        if (tempRoles.length === 0) {
            return interaction.followUp({
                content: `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member} –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.`,
                ephemeral: true
            });
        }
        
        const embed = new EmbedBuilder()
            .setTitle(`üïí –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ | ${member.user.tag}`)
            .setColor('#3498db')
            .setDescription(`–°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member}`)
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
            .setTimestamp();
        
        for (const roleData of tempRoles) {
            const role = interaction.guild.roles.cache.get(roleData.roleId);
            if (!role) continue;
            
            const timeLeft = roleData.timeLeft;
            const timeLeftStr = this.formatDuration(timeLeft);
            
            embed.addFields({
                name: role.name,
                value: `üìù –ü—Ä–∏—á–∏–Ω–∞: ${roleData.reason}\n‚è±Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç: ${moment(roleData.expiresAt).format('DD.MM.YYYY HH:mm')}\n‚åõ –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeftStr}`
            });
        }
        
        await interaction.followUp({ embeds: [embed] });
    },
    
    async updateTempRole(interaction) {
        const member = interaction.options.getMember('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const role = interaction.options.getRole('—Ä–æ–ª—å');
        const timeString = interaction.options.getString('–≤—Ä–µ–º—è');
        
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
        const duration = this.parseDuration(timeString);
        if (!duration) {
            return interaction.reply({
                content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç Xw (–Ω–µ–¥–µ–ª–∏), Xd (–¥–Ω–∏), Xh (—á–∞—Å—ã), Xm (–º–∏–Ω—É—Ç—ã).',
                ephemeral: true
            });
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        const durationMs = duration.value;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await interaction.deferReply();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
        const result = await updateTempRoleDuration(member, role, durationMs);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
                .setColor('#00ff00')
                .setDescription(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏ ${role} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`)
                .addFields(
                    { name: '‚è±Ô∏è –ù–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: duration.text, inline: true },
                    { name: 'üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', value: `${interaction.user}`, inline: true }
                )
                .setTimestamp();
            
            await interaction.followUp({ embeds: [embed] });
        } else {
            await interaction.followUp({
                content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${result.message}`,
                ephemeral: true
            });
        }
    },
    
    parseDuration(input) {
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—á–∏—Å–ª–æ + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
        const regex = /^(\d+)([wdhm])$/;
        const match = input.match(regex);
        
        if (!match) return null;
        
        const value = parseInt(match[1]);
        const unit = match[2];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        let ms = 0;
        let text = '';
        
        switch (unit) {
            case 'w': // –Ω–µ–¥–µ–ª–∏
                ms = value * 7 * 24 * 60 * 60 * 1000;
                text = `${value} ${this.pluralize(value, '–Ω–µ–¥–µ–ª—è', '–Ω–µ–¥–µ–ª–∏', '–Ω–µ–¥–µ–ª—å')}`;
                break;
            case 'd': // –¥–Ω–∏
                ms = value * 24 * 60 * 60 * 1000;
                text = `${value} ${this.pluralize(value, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}`;
                break;
            case 'h': // —á–∞—Å—ã
                ms = value * 60 * 60 * 1000;
                text = `${value} ${this.pluralize(value, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')}`;
                break;
            case 'm': // –º–∏–Ω—É—Ç—ã
                ms = value * 60 * 1000;
                text = `${value} ${this.pluralize(value, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')}`;
                break;
            default:
                return null;
        }
        
        return { value: ms, text };
    },
    
    formatDuration(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) {
            return `${days} ${this.pluralize(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}`;
        } else if (hours > 0) {
            return `${hours} ${this.pluralize(hours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')}`;
        } else if (minutes > 0) {
            return `${minutes} ${this.pluralize(minutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')}`;
        } else {
            return '–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã';
        }
    },
    
    pluralize(count, one, few, many) {
        if (count % 10 === 1 && count % 100 !== 11) {
            return one;
        } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
            return few;
        } else {
            return many;
        }
    }
}; 