const { SlashCommandBuilder, EmbedBuilder, AttachmentBuilder } = require('discord.js');
const { getUserInfo, getLeaderboard } = require('../../features/levelSystem');
const { createCanvas, loadImage } = require('canvas');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('level')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π')
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –∏–ª–∏ —É—Ä–æ–≤–Ω–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                .addUserOption(option =>
                    option
                        .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π —É—Ä–æ–≤–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('leaderboard')
                .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º')
                .addIntegerOption(option =>
                    option
                        .setName('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                        .setDescription('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)')
                        .setRequired(false)
                        .setMinValue(5)
                        .setMaxValue(25)
                )
        ),
    
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === 'info') {
            await this.showLevelInfo(interaction);
        } else if (subcommand === 'leaderboard') {
            await this.showLeaderboard(interaction);
        }
    },
    
    async showLevelInfo(interaction) {
        await interaction.deferReply();
        
        const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || interaction.user;
        const { guild } = interaction;
        
        try {
            const userInfo = await getUserInfo(targetUser.id, guild.id);
            
            if (!userInfo) {
                return interaction.followUp({
                    content: `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser} –µ—â–µ –Ω–µ—Ç –æ–ø—ã—Ç–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.`,
                    ephemeral: true
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —É—Ä–æ–≤–Ω–µ–º
            const levelCard = await this.createLevelCard(targetUser, userInfo);
            
            const embed = new EmbedBuilder()
                .setTitle(`–£—Ä–æ–≤–µ–Ω—å | ${targetUser.tag}`)
                .setColor('#3498db')
                .addFields(
                    { name: 'üìä –£—Ä–æ–≤–µ–Ω—å', value: userInfo.level.toString(), inline: true },
                    { name: '‚≠ê –û–ø—ã—Ç', value: `${userInfo.currentXP}/${userInfo.requiredXP} XP`, inline: true },
                    { name: 'üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å', value: `${userInfo.percentage}%`, inline: true },
                    { name: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–π', value: userInfo.messages.toString(), inline: true },
                    { name: 'üéôÔ∏è –í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö', value: `${userInfo.voiceTime} –º–∏–Ω.`, inline: true }
                )
                .setTimestamp();
            
            await interaction.followUp({
                embeds: [embed],
                files: [levelCard]
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ:', error);
            await interaction.followUp({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ.',
                ephemeral: true
            });
        }
    },
    
    async showLeaderboard(interaction) {
        await interaction.deferReply();
        
        const { guild } = interaction;
        const limit = interaction.options.getInteger('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') || 10;
        
        try {
            const leaderboard = await getLeaderboard(guild.id, limit);
            
            if (!leaderboard || leaderboard.length === 0) {
                return interaction.followUp({
                    content: '–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —É—Ä–æ–≤–Ω—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
                    ephemeral: true
                });
            }
            
            const embed = new EmbedBuilder()
                .setTitle(`üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ | ${guild.name}`)
                .setColor('#e74c3c')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
                .setThumbnail(guild.iconURL({ dynamic: true }))
                .setTimestamp();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
            let leaderboardText = '';
            for (let i = 0; i < leaderboard.length; i++) {
                const user = leaderboard[i];
                const member = await guild.members.fetch(user.userId).catch(() => null);
                const username = member ? member.user.tag : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                leaderboardText += `**${i + 1}.** ${member ? member : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä'}\n`;
                leaderboardText += `–£—Ä–æ–≤–µ–Ω—å: **${user.level}** | XP: **${user.xp}** | –°–æ–æ–±—â–µ–Ω–∏—è: **${user.messages}**\n\n`;
            }
            
            embed.setDescription(leaderboardText);
            
            await interaction.followUp({ embeds: [embed] });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
            await interaction.followUp({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.',
                ephemeral: true
            });
        }
    },
    
    async createLevelCard(user, userInfo) {
        // –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        const canvas = createCanvas(800, 250);
        const ctx = canvas.getContext('2d');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω
        ctx.fillStyle = '#2f3136';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É
        ctx.strokeStyle = '#5865f2';
        ctx.lineWidth = 5;
        ctx.strokeRect(0, 0, canvas.width, canvas.height);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            const avatar = await loadImage(user.displayAvatarURL({ extension: 'png', size: 128 }));
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä
            ctx.save();
            ctx.beginPath();
            ctx.arc(125, 125, 80, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.clip();
            
            ctx.drawImage(avatar, 45, 45, 160, 160);
            ctx.restore();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ctx.font = '36px Arial';
        ctx.fillStyle = '#ffffff';
        ctx.fillText(user.username, 240, 80);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        ctx.font = '28px Arial';
        ctx.fillStyle = '#ffffff';
        ctx.fillText(`–£—Ä–æ–≤–µ–Ω—å: ${userInfo.level}`, 240, 130);
        
        // –î–æ–±–∞–≤–ª—è–µ–º XP
        ctx.font = '24px Arial';
        ctx.fillStyle = '#cccccc';
        ctx.fillText(`XP: ${userInfo.currentXP}/${userInfo.requiredXP}`, 240, 170);
        
        // –†–∏—Å—É–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const barWidth = 500;
        const barHeight = 30;
        const barX = 240;
        const barY = 190;
        
        // –ó–∞–¥–Ω–∏–π —Ñ–æ–Ω –ø–æ–ª–æ—Å—ã
        ctx.fillStyle = '#434b5a';
        ctx.fillRect(barX, barY, barWidth, barHeight);
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        const progressWidth = (userInfo.currentXP / userInfo.requiredXP) * barWidth;
        ctx.fillStyle = '#5865f2';
        ctx.fillRect(barX, barY, progressWidth, barHeight);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        ctx.font = '18px Arial';
        ctx.fillStyle = '#ffffff';
        ctx.fillText(`${userInfo.percentage}%`, barX + barWidth / 2 - 15, barY + 20);
        
        // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const buffer = canvas.toBuffer('image/png');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        return new AttachmentBuilder(buffer, { name: 'level-card.png' });
    }
}; 