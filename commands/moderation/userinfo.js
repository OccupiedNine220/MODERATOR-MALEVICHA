const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { Warning, RiskPoints } = require('../../models/schema');
const moment = require('moment');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('—É—á–∞—Å—Ç–Ω–∏–∫')
        .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ')
        .addUserOption(option => 
            option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                .setRequired(false)),
    
    async execute(interaction) {
        await interaction.deferReply();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã)
        const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || interaction.user;
        const targetMember = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
        
        if (!targetMember) {
            return interaction.editReply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${targetUser.tag}.`);
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        moment.locale('ru');
        const joinedAt = moment(targetMember.joinedAt).format('DD.MM.YYYY [–≤] HH:mm');
        const createdAt = moment(targetUser.createdAt).format('DD.MM.YYYY [–≤] HH:mm');
        const joinDaysAgo = moment().diff(targetMember.joinedAt, 'days');
        const accountDaysAgo = moment().diff(targetUser.createdAt, 'days');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π (–∏—Å–∫–ª—é—á–∞—è @everyone)
        const roles = targetMember.roles.cache
            .filter(role => role.id !== interaction.guild.id)
            .sort((a, b) => b.position - a.position)
            .map(role => role.toString())
            .join(', ') || '–ù–µ—Ç —Ä–æ–ª–µ–π';
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const warningsData = await Warning.findOne({ 
            userId: targetUser.id, 
            guildId: interaction.guild.id 
        });
        
        const warnings = warningsData?.warnings?.length || 0;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Å–∫-–æ—á–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const riskData = await RiskPoints.findOne({ 
            userId: targetUser.id, 
            guildId: interaction.guild.id 
        });
        
        const riskPoints = riskData?.totalPoints || 0;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let permissionsText = '';
        const permissions = targetMember.permissions.toArray();
        
        const keyPermissions = [
            { name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', value: PermissionFlagsBits.Administrator },
            { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º', value: PermissionFlagsBits.ManageGuild },
            { name: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: PermissionFlagsBits.ModerateMembers },
            { name: '–ë–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: PermissionFlagsBits.BanMembers },
            { name: '–ö–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: PermissionFlagsBits.KickMembers },
            { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏', value: PermissionFlagsBits.ManageMessages },
            { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞–º–∏', value: PermissionFlagsBits.ManageNicknames },
            { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏', value: PermissionFlagsBits.ManageRoles }
        ];
        
        for (const perm of keyPermissions) {
            if (targetMember.permissions.has(perm.value)) {
                permissionsText += `${perm.name}, `;
            }
        }
        
        permissionsText = permissionsText.slice(0, -2) || '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π';
        
        // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥
        const userEmbed = new EmbedBuilder()
            .setTitle(`üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${targetUser.tag}`)
            .setColor(targetMember.displayHexColor || 0x2F3136)
            .setThumbnail(targetUser.displayAvatarURL({ dynamic: true, size: 512 }))
            .addFields(
                { name: 'üè∑Ô∏è –ò–º—è', value: targetUser.tag, inline: true },
                { name: 'üÜî ID', value: targetUser.id, inline: true },
                { name: 'ü§ñ –ë–æ—Ç', value: targetUser.bot ? '–î–∞' : '–ù–µ—Ç', inline: true },
                { name: 'üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', value: `${joinedAt} (${joinDaysAgo} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`, inline: true },
                { name: 'üê£ –°–æ–∑–¥–∞–Ω', value: `${createdAt} (${accountDaysAgo} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`, inline: true },
                { name: 'üõë –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', value: `${warnings}`, inline: true },
                { name: '‚ö†Ô∏è –†–∏—Å–∫-–æ—á–∫–∏', value: `${riskPoints}`, inline: true },
                { name: 'üé≠ –ù–∏–∫–Ω–µ–π–º', value: targetMember.nickname || '–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞', inline: true }
            )
            .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}` })
            .setTimestamp();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å —Ä–æ–ª—è–º–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        if (roles.length < 1024) {
            userEmbed.addFields({ name: 'üõ°Ô∏è –†–æ–ª–∏', value: roles.toString(), inline: false });
        } else {
            userEmbed.addFields({ name: 'üõ°Ô∏è –†–æ–ª–∏', value: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (${targetMember.roles.cache.size - 1})`, inline: false });
        }
        
        userEmbed.addFields({ name: 'üîë –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', value: permissionsText, inline: false });
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–∞—É—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (targetMember.communicationDisabledUntil) {
            const timeoutUntil = moment(targetMember.communicationDisabledUntil).format('DD.MM.YYYY [–≤] HH:mm');
            userEmbed.addFields({ name: 'üîá –¢–∞–π–º–∞—É—Ç –¥–æ', value: timeoutUntil, inline: false });
        }
        
        await interaction.editReply({ embeds: [userEmbed] });
    }
}; 