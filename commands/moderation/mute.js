const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { isMod } = require('../../utils/permissions');
const { logModeration } = require('../../utils/logger');
const { Mute } = require('../../models/schema');
const { ModStats } = require('../../models/schema');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('–º—É—Ç')
        .setDescription('–ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
        .addUserOption(option => 
            option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–≥–ª—É—à–∏—Ç—å')
                .setRequired(true))
        .addStringOption(option => 
            option.setName('–≤—Ä–µ–º—è')
                .setDescription('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 30–º, 2—á, 1–¥)')
                .setRequired(true))
        .addStringOption(option => 
            option.setName('–ø—Ä–∏—á–∏–Ω–∞')
                .setDescription('–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è')
                .setRequired(true)),
    
    async execute(interaction) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!isMod(interaction.member)) {
            return interaction.reply({
                content: 'üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                ephemeral: true
            });
        }

        const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const targetMember = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
        
        if (!targetMember) {
            return interaction.reply({
                content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
                ephemeral: true
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–º—É—Ç–∏—Ç—å —Å–µ–±—è –∏–ª–∏ –±–æ—Ç–∞
        if (targetUser.id === interaction.user.id) {
            return interaction.reply({
                content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å–µ–±—è!',
                ephemeral: true
            });
        }

        if (targetUser.bot) {
            return interaction.reply({
                content: '‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –±–æ—Ç–∞!',
                ephemeral: true
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        const timeArg = interaction.options.getString('–≤—Ä–µ–º—è');
        let duration;
        let timeoutDuration;
        
        try {
            if (timeArg.endsWith('–º')) {
                const minutes = parseInt(timeArg.slice(0, -1));
                if (minutes < 1) throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 1 –º–∏–Ω—É—Ç–∞');
                duration = `${minutes} –º–∏–Ω—É—Ç`;
                timeoutDuration = minutes * 60 * 1000;
            } else if (timeArg.endsWith('—á')) {
                const hours = parseInt(timeArg.slice(0, -1));
                if (hours < 1) throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 1 —á–∞—Å');
                duration = `${hours} —á–∞—Å–æ–≤`;
                timeoutDuration = hours * 60 * 60 * 1000;
            } else if (timeArg.endsWith('–¥')) {
                const days = parseInt(timeArg.slice(0, -1));
                if (days < 1) throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 1 –¥–µ–Ω—å');
                if (days > 28) throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 28 –¥–Ω–µ–π');
                duration = `${days} –¥–Ω–µ–π`;
                timeoutDuration = days * 24 * 60 * 60 * 1000;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
            }
        } catch (error) {
            return interaction.reply({
                content: `‚ùå ${error.message}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 30–º (–º–∏–Ω—É—Ç—ã), 2—á (—á–∞—Å—ã), 1–¥ (–¥–Ω–∏).`,
                ephemeral: true
            });
        }

        const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞');
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø—Ä–∏—á–∏–Ω—ã
        if (reason.length > 500) {
            return interaction.reply({
                content: '‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.',
                ephemeral: true
            });
        }

        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
            await targetMember.timeout(timeoutDuration, reason);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const endTime = new Date(Date.now() + timeoutDuration);
            
            await Mute.findOneAndUpdate(
                { userId: targetUser.id, guildId: interaction.guild.id },
                { 
                    userId: targetUser.id,
                    guildId: interaction.guild.id,
                    endTime: endTime,
                    reason: reason
                },
                { upsert: true, new: true }
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            await ModStats.findOneAndUpdate(
                { userId: interaction.user.id, guildId: interaction.guild.id },
                { $inc: { 'actions.mutes': 1 } },
                { upsert: true }
            );
            
            // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥
            const embed = new EmbedBuilder()
                .setTitle('–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞')
                .setDescription(`${targetUser} –±—ã–ª –ª–∏—à–µ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–∞—Ç—å—Å—è.`)
                .setColor(0xFFCC00)
                .addFields(
                    { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason, inline: false },
                    { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: duration, inline: false }
                )
                .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
                .setFooter({ text: `–í—ã–¥–∞–ª: ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL({ dynamic: true }) })
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed] });
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await logModeration(
                interaction.guild,
                interaction.user,
                targetUser,
                'mute',
                reason,
                duration
            );
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ:', error);
            return interaction.reply({
                content: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`,
                ephemeral: true
            });
        }
    }
}; 