const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { toggleModeration, isModerationEnabled } = require('../../features/aiModeration');
const { toggleAutoModeration, isAutoModerationEnabled } = require('../../features/autoModeration');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('–º–æ–¥–µ—Ä–∞—Ü–∏—è')
        .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
        .addSubcommand(subcommand =>
            subcommand
                .setName('–∞–∏')
                .setDescription('–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—é')
                .addBooleanOption(option =>
                    option.setName('—Å—Ç–∞—Ç—É—Å')
                        .setDescription('–í–∫–ª—é—á–∏—Ç—å (true) –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å (false) –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—é')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('–∞–≤—Ç–æ')
                .setDescription('–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é')
                .addBooleanOption(option =>
                    option.setName('—Å—Ç–∞—Ç—É—Å')
                        .setDescription('–í–∫–ª—é—á–∏—Ç—å (true) –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å (false) –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—é')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('—Å—Ç–∞—Ç—É—Å')
                .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏'))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === '–∞–∏') {
            const status = interaction.options.getBoolean('—Å—Ç–∞—Ç—É—Å');
            const newStatus = toggleModeration(status);
            
            const embed = new EmbedBuilder()
                .setTitle('ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π')
                .setColor(newStatus ? 0x2ECC71 : 0xE74C3C)
                .setDescription(`–ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ **${newStatus ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}**.`)
                .setFooter({ text: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ' })
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed] });
        }
        else if (subcommand === '–∞–≤—Ç–æ') {
            const status = interaction.options.getBoolean('—Å—Ç–∞—Ç—É—Å');
            const newStatus = toggleAutoModeration(status);
            
            const embed = new EmbedBuilder()
                .setTitle('üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–µ–π')
                .setColor(newStatus ? 0x2ECC71 : 0xE74C3C)
                .setDescription(`–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ **${newStatus ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}**.`)
                .setFooter({ text: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ' })
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed] });
        }
        else if (subcommand === '—Å—Ç–∞—Ç—É—Å') {
            const aiStatus = isModerationEnabled();
            const autoStatus = isAutoModerationEnabled();
            
            const embed = new EmbedBuilder()
                .setTitle('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
                .setColor(0x3498DB)
                .addFields(
                    { name: 'ü§ñ –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—è', value: aiStatus ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞', inline: true },
                    { name: 'üõ°Ô∏è –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è', value: autoStatus ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞', inline: true }
                )
                .setFooter({ text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–º–æ–¥–µ—Ä–∞—Ü–∏—è –∞–∏ –∏–ª–∏ /–º–æ–¥–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' })
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed] });
        }
    }
}; 