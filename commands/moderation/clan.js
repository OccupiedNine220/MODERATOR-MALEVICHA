const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');
const { Clan } = require('../../models/schema');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('clan')
        .setDescription('–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞–º–∏')
        .addSubcommand(subcommand =>
            subcommand
                .setName('create')
                .setDescription('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω')
                .addStringOption(option => 
                    option.setName('name')
                        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞')
                        .setRequired(true))
                .addStringOption(option => 
                    option.setName('description')
                        .setDescription('–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞')
                        .setRequired(false))
                .addStringOption(option => 
                    option.setName('emoji')
                        .setDescription('–≠–º–æ–¥–∑–∏ –∫–ª–∞–Ω–∞')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ')
                .addStringOption(option => 
                    option.setName('name')
                        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞)')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('join')
                .setDescription('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É')
                .addStringOption(option => 
                    option.setName('name')
                        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('leave')
                .setDescription('–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('kick')
                .setDescription('–í—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞')
                .addUserOption(option => 
                    option.setName('user')
                        .setDescription('–£—á–∞—Å—Ç–Ω–∏–∫')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('delete')
                .setDescription('–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('edit')
                .setDescription('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ')
                .addStringOption(option => 
                    option.setName('description')
                        .setDescription('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
                        .setRequired(false))
                .addStringOption(option => 
                    option.setName('emoji')
                        .setDescription('–ù–æ–≤–æ–µ —ç–º–æ–¥–∑–∏')
                        .setRequired(false))),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'create':
                await createClan(interaction);
                break;
            case 'info':
                await clanInfo(interaction);
                break;
            case 'list':
                await listClans(interaction);
                break;
            case 'join':
                await joinClan(interaction);
                break;
            case 'leave':
                await leaveClan(interaction);
                break;
            case 'kick':
                await kickMember(interaction);
                break;
            case 'delete':
                await deleteClan(interaction);
                break;
            case 'edit':
                await editClan(interaction);
                break;
        }
    }
};

async function createClan(interaction) {
    const userId = interaction.user.id;
    const name = interaction.options.getString('name');
    const description = interaction.options.getString('description') || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const emoji = interaction.options.getString('emoji') || 'üè∞';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    const existingClan = await Clan.findOne({ name });
    if (existingClan) {
        return interaction.reply({ content: '‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', ephemeral: true });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–ª–∞–Ω–µ
    const userClan = await Clan.findOne({ $or: [{ owner: userId }, { members: userId }] });
    if (userClan) {
        return interaction.reply({ content: '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–ª–∞–Ω.', ephemeral: true });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞–Ω
    const newClan = new Clan({
        name,
        owner: userId,
        description,
        emoji,
        members: [userId]
    });

    await newClan.save();

    const embed = new EmbedBuilder()
        .setTitle(`${emoji} –ö–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: ${name}`)
        .setDescription(description)
        .addFields(
            { name: '–í–ª–∞–¥–µ–ª–µ—Ü', value: `<@${userId}>`, inline: true },
            { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: '1', inline: true },
            { name: '–£—Ä–æ–≤–µ–Ω—å', value: '1', inline: true }
        )
        .setColor('#2b2d31')
        .setTimestamp();

    interaction.reply({ embeds: [embed] });
}

async function clanInfo(interaction) {
    const userId = interaction.user.id;
    const clanName = interaction.options.getString('name');
    
    let clan;
    
    if (clanName) {
        clan = await Clan.findOne({ name: clanName });
        if (!clan) {
            return interaction.reply({ content: '‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!', ephemeral: true });
        }
    } else {
        clan = await Clan.findOne({ $or: [{ owner: userId }, { members: userId }] });
        if (!clan) {
            return interaction.reply({ content: '‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!', ephemeral: true });
        }
    }

    const memberCount = clan.members.length;
    const ownerTag = await interaction.client.users.fetch(clan.owner).then(user => user.tag).catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    
    const embed = new EmbedBuilder()
        .setTitle(`${clan.emoji} –ö–ª–∞–Ω: ${clan.name}`)
        .setDescription(clan.description)
        .addFields(
            { name: '–í–ª–∞–¥–µ–ª–µ—Ü', value: `<@${clan.owner}> (${ownerTag})`, inline: true },
            { name: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', value: memberCount.toString(), inline: true },
            { name: '–£—Ä–æ–≤–µ–Ω—å', value: clan.level.toString(), inline: true },
            { name: '–û–ø—ã—Ç', value: `${clan.exp}/${clan.level * 1000}`, inline: true },
            { name: '–°–∏–ª–∞', value: clan.power.toString(), inline: true }
        )
        .setColor('#2b2d31')
        .setTimestamp();

    const membersField = await getMembersField(interaction.client, clan.members);
    embed.addFields({ name: '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: membersField });

    interaction.reply({ embeds: [embed] });
}

async function getMembersField(client, members) {
    let membersText = '';
    
    for (const memberId of members.slice(0, 10)) {
        const user = await client.users.fetch(memberId).catch(() => null);
        if (user) {
            membersText += `<@${memberId}> (${user.tag})\n`;
        } else {
            membersText += `<@${memberId}> (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)\n`;
        }
    }
    
    if (members.length > 10) {
        membersText += `...–∏ –µ—â–µ ${members.length - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
    }
    
    return membersText || '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
}

async function listClans(interaction) {
    const clans = await Clan.find().sort({ level: -1, exp: -1 });
    
    if (clans.length === 0) {
        return interaction.reply({ content: '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤!', ephemeral: true });
    }
    
    const embed = new EmbedBuilder()
        .setTitle('üìú –°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤')
        .setDescription('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É—Ä–æ–≤–Ω—é –∏ –æ–ø—ã—Ç—É')
        .setColor('#2b2d31')
        .setTimestamp();
    
    clans.forEach((clan, index) => {
        embed.addFields({ 
            name: `${index + 1}. ${clan.emoji} ${clan.name} (–£—Ä–æ–≤–µ–Ω—å ${clan.level})`, 
            value: `–í–ª–∞–¥–µ–ª–µ—Ü: <@${clan.owner}>\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${clan.members.length}\n–°–∏–ª–∞: ${clan.power}\n–û–ø—ã—Ç: ${clan.exp}/${clan.level * 1000}`
        });
    });
    
    interaction.reply({ embeds: [embed] });
}

async function joinClan(interaction) {
    const userId = interaction.user.id;
    const clanName = interaction.options.getString('name');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–ª–∞–Ω–µ
    const userClan = await Clan.findOne({ $or: [{ owner: userId }, { members: userId }] });
    if (userClan) {
        return interaction.reply({ content: '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–ª–∞–Ω.', ephemeral: true });
    }
    
    // –ü–æ–∏—Å–∫ –∫–ª–∞–Ω–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    const clan = await Clan.findOne({ name: clanName });
    if (!clan) {
        return interaction.reply({ content: '‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!', ephemeral: true });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω
    clan.members.push(userId);
    await clan.save();
    
    interaction.reply({ content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω ${clan.emoji} ${clan.name}!` });
}

async function leaveClan(interaction) {
    const userId = interaction.user.id;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clan = await Clan.findOne({ members: userId });
    
    if (!clan) {
        return interaction.reply({ content: '‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!', ephemeral: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if (clan.owner === userId) {
        return interaction.reply({ 
            content: '‚ùå –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∫–ª–∞–Ω.',
            ephemeral: true 
        });
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª–∞–Ω–∞
    clan.members = clan.members.filter(id => id !== userId);
    await clan.save();
    
    interaction.reply({ content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω ${clan.emoji} ${clan.name}!` });
}

async function kickMember(interaction) {
    const userId = interaction.user.id;
    const targetUser = interaction.options.getUser('user');
    const targetId = targetUser.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç—å —Å–µ–±—è
    if (userId === targetId) {
        return interaction.reply({ content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å–µ–±—è –∏–∑ –∫–ª–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clan leave.', ephemeral: true });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clan = await Clan.findOne({ owner: userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞
    if (!clan) {
        return interaction.reply({ content: '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞!', ephemeral: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–ª–∞–Ω–µ
    if (!clan.members.includes(targetId)) {
        return interaction.reply({ content: '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ!', ephemeral: true });
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª–∞–Ω–∞
    clan.members = clan.members.filter(id => id !== targetId);
    await clan.save();
    
    interaction.reply({ content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–ª–∞–Ω–∞ ${clan.emoji} ${clan.name}!` });
}

async function deleteClan(interaction) {
    const userId = interaction.user.id;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clan = await Clan.findOne({ owner: userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞
    if (!clan) {
        return interaction.reply({ content: '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞!', ephemeral: true });
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmEmbed = new EmbedBuilder()
        .setTitle('‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞')
        .setDescription(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω ${clan.emoji} ${clan.name}?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)
        .setColor('#ff0000')
        .setTimestamp();
    
    const confirmRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('confirm_delete')
                .setLabel('–£–¥–∞–ª–∏—Ç—å')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('cancel_delete')
                .setLabel('–û—Ç–º–µ–Ω–∞')
                .setStyle(ButtonStyle.Secondary)
        );
    
    const response = await interaction.reply({ embeds: [confirmEmbed], components: [confirmRow], fetchReply: true });
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const filter = i => i.user.id === userId && ['confirm_delete', 'cancel_delete'].includes(i.customId);
    const collector = response.createMessageComponentCollector({ filter, time: 30000 });
    
    collector.on('collect', async i => {
        if (i.customId === 'confirm_delete') {
            await Clan.findByIdAndDelete(clan._id);
            await i.update({ content: `‚úÖ –ö–ª–∞–Ω ${clan.emoji} ${clan.name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`, embeds: [], components: [] });
        } else {
            await i.update({ content: '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', embeds: [], components: [] });
        }
        collector.stop();
    });
    
    collector.on('end', async (collected, reason) => {
        if (reason === 'time') {
            await interaction.editReply({ content: '‚ùå –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', embeds: [], components: [] });
        }
    });
}

async function editClan(interaction) {
    const userId = interaction.user.id;
    const description = interaction.options.getString('description');
    const emoji = interaction.options.getString('emoji');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    if (!description && !emoji) {
        return interaction.reply({ content: '‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!', ephemeral: true });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const clan = await Clan.findOne({ owner: userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞
    if (!clan) {
        return interaction.reply({ content: '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞!', ephemeral: true });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
    if (description) clan.description = description;
    if (emoji) clan.emoji = emoji;
    
    await clan.save();
    
    const embed = new EmbedBuilder()
        .setTitle(`${clan.emoji} –ö–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: ${clan.name}`)
        .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
        .addFields(
            { name: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', value: clan.description },
            { name: '–ù–æ–≤–æ–µ —ç–º–æ–¥–∑–∏', value: clan.emoji }
        )
        .setColor('#2b2d31')
        .setTimestamp();
    
    interaction.reply({ embeds: [embed] });
}
 